1. Int32 ar1.ChirpConfig(UInt16 chirpStartIdx, UInt16 chirpEndIdx, UInt16 profileId, Single startFreqVar, Single freqSlopeVar, Single idleTimeVar, Single adcStartTimeVar, UInt16 tx0Enable, UInt16 tx1Enable, UInt16 tx2Enable, UInt16 tx3Enable)                                                                                                                                                                     -  Chirp configuration API which defines which profile is to be used for each chirp in a frame
2. Int32 ar1.AdvDynPerChirpPhShifterCfgSet(Byte Reserved, Byte ChirpSegmentSelect, Byte Chirp1Tx0PhaseShifter, Byte Chirp1Tx1PhaseShifter, Byte Chirp1Tx2PhaseShifter, Byte Chirp1Tx3PhaseShifter, Byte Chirp2Tx0PhaseShifter, Byte Chirp2Tx1PhaseShifter, Byte Chirp2Tx2PhaseShifter, Byte Chirp2Tx3PhaseShifter, Byte Chirp3Tx0PhaseShifter, Byte Chirp3Tx1PhaseShifter, Byte Chirp3Tx2PhaseShifter, Byte Chirp3Tx3PhaseShifter, Byte Chirp4Tx0PhaseShifter, Byte Chirp4Tx1PhaseShifter, Byte Chirp4Tx2PhaseShifter, Byte Chirp4Tx3PhaseShifter, Byte Chirp5Tx0PhaseShifter, Byte Chirp5Tx1PhaseShifter, Byte Chirp5Tx2PhaseShifter, Byte Chirp5Tx3PhaseShifter, Byte Chirp6Tx0PhaseShifter, Byte Chirp6Tx1PhaseShifter, Byte Chirp6Tx2PhaseShifter, Byte Chirp6Tx3PhaseShifter, Byte Chirp7Tx0PhaseShifter, Byte Chirp7Tx1PhaseShifter, Byte Chirp7Tx2PhaseShifter, Byte Chirp7Tx3PhaseShifter, Byte Chirp8Tx0PhaseShifter, Byte Chirp8Tx1PhaseShifter, Byte Chirp8Tx2PhaseShifter, Byte Chirp8Tx3PhaseShifter, Byte Chirp9Tx0PhaseShifter, Byte Chirp9Tx1PhaseShifter, Byte Chirp9Tx2PhaseShifter, Byte Chirp9Tx3PhaseShifter, Byte Chirp10Tx0PhaseShifter, Byte Chirp10Tx1PhaseShifter, Byte Chirp10Tx2PhaseShifter, Byte Chirp10Tx3PhaseShifter, Byte Chirp11Tx0PhaseShifter, Byte Chirp11Tx1PhaseShifter, Byte Chirp11Tx2PhaseShifter, Byte Chirp11Tx3PhaseShifter, Byte Chirp12Tx0PhaseShifter, Byte Chirp12Tx1PhaseShifter, Byte Chirp12Tx2PhaseShifter, Byte Chirp12Tx3PhaseShifter, Byte Chirp13Tx0PhaseShifter, Byte Chirp13Tx1PhaseShifter, Byte Chirp13Tx2PhaseShifter, Byte Chirp13Tx3PhaseShifter, Byte Chirp14Tx0PhaseShifter, Byte Chirp14Tx1PhaseShifter, Byte Chirp14Tx2PhaseShifter, Byte Chirp14Tx3PhaseShifter, Byte Chirp15Tx0PhaseShifter, Byte Chirp15Tx1PhaseShifter, Byte Chirp15Tx2PhaseShifter, Byte Chirp15Tx3PhaseShifter, Byte Chirp16Tx0PhaseShifter, Byte Chirp16Tx1PhaseShifter, Byte Chirp16Tx2PhaseShifter, Byte Chirp16Tx3PhaseShifter, UInt16 ProgramModedvDynPerChirpPhShifterCfgSet API used to dynamically change the per
3. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfAdvTxGainPhaseMismatchMonConfig_mult(UInt16 RadarDeviceId, Char ProfileIndex, Char RF1FreqBitMask, Char RF2FreqBitMask, Char RF3FreqBitMask, Char Tx0Channel, Char Tx1Channel, Char Tx2Channel, Char Tx3Channel, Char Rx0Channel, Char Rx1Channel, Char Rx2Channel, Char Rx3Channel, Char ReportingMode, Double monChirpSlope, Double TxGainMismatchThreshold, Double TxPhaseMismatchThreshold, Double RF1Tx0GainMismatchOffsetVal, Double RF1Tx1GainMismatchOffsetVal, Double RF1Tx2GainMismatchOffsetVal, Double RF1Tx3GainMismatchOffsetVal, Double RF2Tx0GainMismatchOffsetVal, Double RF2Tx1GainMismatchOffsetVal, Double RF2Tx2GainMismatchOffsetVal, Double RF2Tx3GainMismatchOffsetVal, Double RF3Tx0GainMismatchOffsetVal, Double RF3Tx1GainMismatchOffsetVal, Double RF3Tx2GainMismatchOffsetVal, Double RF3Tx3GainMismatchOffsetVal, Double RF1Tx0PhaseMismatchOffsetVal, Double RF1Tx1PhaseMismatchOffsetVal, Double RF1Tx2PhaseMismatchOffsetVal, Double RF1Tx3PhaseMismatchOffsetVal, Double RF2Tx0PhaseMismatchOffsetVal, Double RF2Tx1PhaseMismatchOffsetVal, Double RF2Tx2PhaseMismatchOffsetVal, Double RF2Tx3PhaseMismatchOffsetVal, Double RF3Tx0PhaseMismatchOffsetVal, Double RF3Tx1PhaseMismatchOffsetVal, Double RF3Tx2PhaseMismatchOffsetVal, Double RF3Tx3PhaseMismatchOffsetVal, UInt16 Reserved3, UInt32 ReservedetRfAdvTxGainPhaseMismatchMonConfig API which defines as containing information related to Tx gain and phase mismatch monitoring
4. Int32 ar1.Calling_IsFirmwareRunning()                                         -  return if FW is running or not
5. Int32 ar1.SetTestSource(Single obj1PosX, Single obj1PosY, Single obj1PosZ, Single obj1VelX, Single obj1VelY, Single obj1VelZ, Single obj1BMinX, Single obj1BMinY, Single obj1BMinZ, Single obj1BMaxX, Single obj1BMaxY, Single obj1BMaxZ, Single obj1Sig, Single obj2PosX, Single obj2PosY, Single obj2PosZ, Single obj2VelX, Single obj2VelY, Single obj2VelZ, Single obj2BMinX, Single obj2BMinY, Single obj2BMinZ, Single obj2BMaxX, Single obj2BMaxY, Single obj2BMaxZ, Single obj2Sig, Single obj1AntPosRx1X, Single obj1AntPosRx1Z, Single obj1AntPosRx2X, Single obj1AntPosRx2Z, Single obj1AntPosRx3X, Single obj1AntPosRx3Z, Single obj1AntPosRx4X, Single obj1AntPosRx4Z, Single obj1AntPosTx1X, Single obj1AntPosTx1Z, Single obj1AntPosTx2X, Single obj1AntPosTx2Z, Single obj1AntPosTx3X, Single obj1AntPosTx3Z, UInt16 disableDither)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         -  Set Test Source API Defines test source emulates recieved reflections from pair of objects at different positions with different velocities and their signal level strengths
6. Int32 ar1.LoadAdvChirpLUTConfig()                                             -  Load Advanced Chirp LUT configuration API
7. Int32 ar1.SetRfTx0PhShiftMonConfig_mult(UInt16 RadarDeviceId, Byte ProfileIndex, Byte ReportingMode, Double MonChirpSlope, Byte PhaseEn, Byte RxChannel, Double PhShifterIncVal1, Double PhShifterIncVal2, Double PhShifterIncVal3, Double PhShifterIncVal4, Double PhShifterMonVal1, Double PhShifterMonVal2, Double PhShifterMonVal3, Double PhShifterMonVal4, Double TxPhaseErrorThreshold, Double TxAmplitudeErrorThreshold)                                                                                                                                                                                                                                                                                                                                                      -  SetRfTx0PhShiftMonConfig API is a monitoring configuration API containing information related to TX0 TX loop back based phase shifter monitoring
8. Int32 ar1.SetProgFiltCoeffRam101to104_mult(UInt16 RadarDeviceId, Int16 FirstCoeff, Int16 SecondCoeff, Int16 ThirdCoeff, Int16 FourthCoeff)                                                                -  SetProgFiltCoeffRam101to104 API Defines externally program the filter coeff RAM from 1 to 10
9. Int32 ar1.AdvChirpConfig_mult(UInt16 RadarDeviceId, Byte chirpParamIdx, Byte resetMode, Byte paramCtrl, UInt16 deltaResetPeriod, UInt16 deltaParamUpdatePeriod, Int32 sf0ChirpParamDelta, Int32 sf1ChirpParamDelta, Int32 sf2ChirpParamDelta, Int32 sf3ChirpParamDelta, UInt16 lutResetPeriod, UInt16 lutParamUpdatePeriod, UInt16 lutPatternAddressOffset, UInt16 numPatterns, UInt16 lutBurstIndexOffset, UInt16 lutSfIndexOffset, Byte lutChirpParamSize, Byte lutChirpParamScale, UInt16 maxTxPhShifIntDither)                                                                                                                                                                                                                                                                                                                                                                                                                                        -  Advanced Chirp configuration API
10. Int32 ar1.SetTxEnAdvChirpConfigLUT(UInt16 TXEnableLUTAddOff, Byte TXEnableNumParams, Byte TXEnableData1, Byte TXEnableData2, Byte TXEnableData3, Byte TXEnableData4)                                                                                           -  Tx Enable Advanced Chirp LUT configuration API
11. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,UInt16& ar1.DFEStaticReportGet()                                                                                                                                                                                                                                                                                                       -  DFEStaticReportGet
12. Int32 ar1.ContStrModEnable_mult(UInt16 RadarDeviceId)                        -  Continuous Streming Mode Enable API defines Configuration needed to enable the continuous streaming mode from the device
13. Int32 ar1.ChirpConfig_mult(UInt16 RadarDeviceId, UInt16 chirpStartIdx, UInt16 chirpEndIdx, UInt16 profileId, Single startFreqVar, Single freqSlopeVar, Single idleTimeVar, Single adcStartTimeVar, UInt16 tx0Enable, UInt16 tx1Enable, UInt16 tx2Enable, UInt16 tx3Enable)                                                                                                                                                                                                 -  Chirp configuration API which defines which profile is to be used for each chirp in a frame
14. Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfSynthFreqMonConfig(Char ProfileIndex, Char ReportingMode, UInt16 FreqErrorThreshold, Double MonStartTime, Char MonitorMode, Char profile0, Char profile1, Byte profBitMaskLiveByte)                                                                                                                                                               -   SetRfSynthFreqMonConfig API which defines that configure the information related to synthesizer frequency monitoring during chirping and report the soft results from monitor
15. Int32 ar1.DisableTestSource(UInt16 mode)                                     -  DisableTestSource
16. Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfSynthLinMonConfig_mult(UInt16 RadarDeviceId, Char ProfileIndex, Char ReportingMode, UInt16 FreqErrorThreshold, Double Profile0MonStartTime, Double Profile1MonStartTime, Double Profile2MonStartTime, Double Profile3MonStartTime, Double Profile4MonStartTime, Double Profile5MonStartTime, Double Profile6MonStartTime, Char DataPathParams1L1, Char DataPathParams1L2, Char DataPathParams1N, Char DataPathParams2S1, Char DataPathParams2S2, Char DataPathParams2S, Char Profile0LinearityRAMAddress, Char Profile1LinearityRAMAddress, Char Profile2LinearityRAMAddress, Char Profile3LinearityRAMAddress, Char Profile4LinearityRAMAddress, Char Profile5LinearityRAMAddress, Char Profile6LinearityRAMAddress, Byte LinearityDataDumpAddretRfSynthLinMonConfig API used to containing information related to synthesizer frequency error and linearity monitoring during chirping
17. Int32 ar1.WaitForTriggerType_mult(UInt16 RadarDeviceId, UInt16 monTriggerType)     -  WaitForTriggerType_mult API will wait until the host has received the trigger type done async event
18. Int32 ar1.rlRfPhShifterCalibDataRestore(UInt16 Reserved0, UInt16 Reserved1, UInt16 Reserved2, UInt16 Reserved3, String PhaseShiterCalibRestoreFilePath)                                                                              -  rlRfPhShifterCalibDataRestore API used to restore the phase shifter calibration data for Tx channles
19. Int32 ar1.SetRFDeviceConfig_mult(UInt16 RadarDeviceId, UInt32 RFAEDirection, Byte AEControl, Byte BSSAnaControl, Byte BSSDigitalControl, Byte AsyncEventCRCConfig, Byte Reserved2, UInt16 Reserved3)                                                                                                                           -   SetRFDeviceConfig API which configures the direction of async event from BSS
20. Int32 ar1.SetPMICRegConfig(Byte SlaveAddress, Byte RegAddress, Byte RegMsbData, Byte RegLsbData, UInt32 DataSize)                                        -  SetPMICRegConfig API is used for configure the PMIC register 
21. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.AdvTxGainTempLutGet_mult(UInt16 RadarDeviceId, Char ProfileIndex, Char TxIndex)                                                                                                                                                -   AdvTxGainTempLutGet API used to read the TX gain temperature LUT used by the firmware
22. Int32 ar1.SOPControl(UInt16 sopMod)                                          -  SOPControl
23. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfDualClkCompMonConfig(Char ReportingMode, Char ClockPair0, Char ClockPair1, Char ClockPair2, Char ClockPair3, Char ClockPair4, Char ClockPair5, Char FRC_200M)                                                                                                                                                                 -  SetRfDualClkCompMonConfig API which defines that configure the information related to DCC based clock  frequency monitoring and report the soft results from monitor
24. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfAdvTxGainPhaseMismatchMonConfig(Char ProfileIndex, Char RF1FreqBitMask, Char RF2FreqBitMask, Char RF3FreqBitMask, Char Tx0Channel, Char Tx1Channel, Char Tx2Channel, Char Tx3Channel, Char Rx0Channel, Char Rx1Channel, Char Rx2Channel, Char Rx3Channel, Char ReportingMode, Double monChirpSlope, Double TxGainMismatchThreshold, Double TxPhaseMismatchThreshold, Double RF1Tx0GainMismatchOffsetVal, Double RF1Tx1GainMismatchOffsetVal, Double RF1Tx2GainMismatchOffsetVal, Double RF1Tx3GainMismatchOffsetVal, Double RF2Tx0GainMismatchOffsetVal, Double RF2Tx1GainMismatchOffsetVal, Double RF2Tx2GainMismatchOffsetVal, Double RF2Tx3GainMismatchOffsetVal, Double RF3Tx0GainMismatchOffsetVal, Double RF3Tx1GainMismatchOffsetVal, Double RF3Tx2GainMismatchOffsetVal, Double RF3Tx3GainMismatchOffsetVal, Double RF1Tx0PhaseMismatchOffsetVal, Double RF1Tx1PhaseMismatchOffsetVal, Double RF1Tx2PhaseMismatchOffsetVal, Double RF1Tx3PhaseMismatchOffsetVal, Double RF2Tx0PhaseMismatchOffsetVal, Double RF2Tx1PhaseMismatchOffsetVal, Double RF2Tx2PhaseMismatchOffsetVal, Double RF2Tx3PhaseMismatchOffsetVal, Double RF3Tx0PhaseMismatchOffsetVal, Double RF3Tx1PhaseMismatchOffsetVal, Double RF3Tx2PhaseMismatchOffsetVal, Double RF3Tx3PhaseMismatchOffsetVal, UInt16 Reserved3, UInt32 ReservedetRfAdvTxGainPhaseMismatchMonConfig API which defines as containing information related to Tx gain and phase mismatch monitoring
25. Int32,Int32,String& ar1.GetBSSFwVersionAPI()                                 -  Get the version of both BSS FW and patch over SPI
26. Int32,String& ar1.SetRfDigLatentFaultMonEnableConfig(UInt32 DigitalMonEnables, Char TestMode, UInt32 Reserved1, UInt32 Reserved2)                                                        -   SetRfDigLatentFaultMonEnableConfig API which defines configure the of all digital monitoring
27. Int32 ar1.SetApllSynthBWCtlConfig(Char SynthICPTrim, Char SynthRZTrim, Char ApllICPTrim, Char ApllRZTrimLPF, Char ApllRZTrimVCO, Char SynthICPTrimVCO2, Char SynthRZTrimVCO2)                                                                                                    -   SetApllSynthBWCtlConfig API controls the bandwidth of the APLL and the Synthesizer
28. Int32 ar1.SetCalMonFreqLimitConfig_mult(UInt16 RadarDeviceId, Double FreqLimitLow, Double FreqLimitHigh, Byte Vco2RangeCfg)                                                  -   SetCalMonFreqLimitConfig_mult API which defines Radar RF calibration and monitoring frequency limit
29. Int32 ar1.StopRlTimePostProc(String filename)                                -  StopRlTimePostProc
30. Int32 ar1.CustomCommand(UInt16 msgDir, UInt16 msgType, UInt16 msgID, UInt16 noSbc, UInt16 sbID, UInt16 sbLen, String sbData)                                                   -  Custom Command API Defines the used to creation of the customized command.
31. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfRxGainPhMonConfig_mult(UInt16 RadarDeviceId, Char ProfileIndex, Char RF1FreqBitMask, Char RF2FreqBitMask, Char RF3FreqBitMask, Char ReportingMode, Char TxSelect, Double RxGainAbsoluteErrorThreshold, Double RxGainMismatchThreshold, Double RxGainFlatnessErrorThreshold, UInt16 RxPhaseMismatchThreshold, Double RF1RX0RXGainMismatchOffsetVal, Double RF1RX1RXGainMismatchOffsetVal, Double RF1RX2RXGainMismatchOffsetVal, Double RF1RX3RXGainMismatchOffsetVal, Double RF2RX0RXGainMismatchOffsetVal, Double RF2RX1RXGainMismatchOffsetVal, Double RF2RX2RXGainMismatchOffsetVal, Double RF2RX3RXGainMismatchOffsetVal, Double RF3RX0RXGainMismatchOffsetVal, Double RF3RX1RXGainMismatchOffsetVal, Double RF3RX2RXGainMismatchOffsetVal, Double RF3RX3RXGainMismatchOffsetVal, Double RF1RX0RXPhaseMismatchOffsetVal, Double RF1RX1RXPhaseMismatchOffsetVal, Double RF1RX2RXPhaseMismatchOffsetVal, Double RF1RX3RXPhaseMismatchOffsetVal, Double RF2RX0RXPhaseMismatchOffsetVal, Double RF2RX1RXPhaseMismatchOffsetVal, Double RF2RX2RXPhaseMismatchOffsetVal, Double RF2RX3RXPhaseMismatchOffsetVal, Double RF3RX0RXPhaseMismatchOffsetVal, Double RF3RX1RXPhaseMismatchOffsetVal, Double RF3RX2RXPhaseMismatchOffsetVal, Double RF3RX3RXPhaseMismatchOffsetVal, Char DitherEn, SByte RF1MinFreqDither, SByte RF1MaxFreqDither, SByte RF2MinFreqDither, SByte RF2MaxFreqDither, SByte RF3MinFreqDither, SByte RF3MaxFreqDitheretRfRxGainPhMonConfig API which defines that configure the monitors of reciever gain and phase, and report the soft results from monitor
32. Int32 ar1.deviceVariantSelection(String DeviceName)                          -  Select diffrent Device Variant for Download firmware
33. Int32 ar1.SetCalMonTimeUnitConfig_mult(UInt16 RadarDeviceId, UInt16 CalibMonTimeUnit, Char NumCascadeDevices, Char DeviceId, Char MonitorMode)                                                                     -   SetCalMonTimeUnitConfig API which defines calibration and monitoring time unit configuration
34. String ar1.GetBSSFwVersion()                                                 -  Get the version of the FW loaded (and update it in the gui)
35. Int32,Int32,Int32,Int32,UInt32& ar1.RfInit_mult(UInt16 RadarDeviceId)        -  RfInit API defines the intialization of RF anlog and digital base band sections
36. Int32 ar1.CustomCommand_mult(UInt16 RadarDeviceId, UInt16 msgDir, UInt16 msgType, UInt16 msgID, UInt16 noSbc, UInt16 sbID, UInt16 sbLen, String sbData)                                                                              -  Custom Command API Defines the used to creation of the customized command.
37. Int32,String& ar1.Calling_GetFwFilePath()                                    -  Get the FW file path
38. Int32 ar1.SetTemperatureReportConfig(UInt16 AeReportPeriod)                  -  SetTemperatureReportConfig API Defines the provides the device temperature sensor information
39. Int32 ar1.StartTsw1400Arm(String filename)                                   -  StartTsw1400Arm
40. Int32 ar1.RemoveDevice(UInt16 RadarDeviceId)                                 -  Disconnect the SPI from slave Devices
41. Int32,Int32,Int32,Int32,String& ar1.SetRfTx2BallbreakMonConfig(Char ReportingMode, Double TXReflectionCoeffMagnitudeThreshold, Double MonStartFreqConst, Char TxPowBackoff)                                                                                                  -   SetRfTx2BallbreakMonConfig API which defines that configure the monitors of TX2 transmitter balls and impedance matching and report the soft results from monitor
42. Int32,String& ar1.GetInternalRfCfg_mult(UInt16 RadarDeviceId, UInt16 ProfileIDValue, UInt32 address, UInt16 start_bit, UInt16 end_bit)                                                             -  GetInternalRfCfg
43. Int32 ar1.DeviceReadMemBlockConfig(UInt32 BlockStartAddress, UInt32 DataLength, UInt32 Reserved)                       -  DeviceReadMemBlockConfig API Defines the used to read contiguous memory locations
44. Int32 ar1.SetDebugSignalsConfig_mult(UInt16 RadarDeviceId, Byte ClkOut, Byte ADCStart)             -  SetDebugSignalsConfig_mult API used to enable the Debug signals for the chirp cycle
45. Int32,Int32,String& ar1.GetPMICRegConfig(Byte SlaveAddress, Byte RegAddress, UInt32 DataSize)                    -  GetPMICRegConfig API is used for configure the PMIC register 
46. Int32 ar1.SetProgFiltCoeffRam1to10(Int16 FirstCoeff, Int16 SecondCoeff, Int16 ThirdCoeff, Int16 FourthCoeff, Int16 FifthCoeff, Int16 SixthCoeff, Int16 SeventhCoeff, Int16 EigthCoeff, Int16 NinethCoeff, Int16 TenthCoeff)                                                                                                                                                  -  SetProgFiltCoeffRam1to10 API Defines externally program the filter coeff RAM from 1 to 10
47. Int32 ar1.WriteRegister(UInt32 address, Int32 start_bit, Int32 end_bit, UInt32 value)            -  Write to a register by address and mask
48. Int32 ar1.SetProgFiltCoeffRam61to70(Int16 FirstCoeff, Int16 SecondCoeff, Int16 ThirdCoeff, Int16 FourthCoeff, Int16 FifthCoeff, Int16 SixthCoeff, Int16 SeventhCoeff, Int16 EigthCoeff, Int16 NinethCoeff, Int16 TenthCoeff)                                                                                                                                                   -  SetProgFiltCoeffRam61to70 API Defines externally program the filter coeff RAM from 1 to 10
49. Int32 ar1.setUpContMode(String filename, Int32 NoOfSamples)                  -  SetUpContMode
50. Int32 ar1.AdvChirpDynLUTAddOffConfig(UInt16 addrMaskEn, UInt16 lutAddressOffsetProfile, UInt16 lutAddressOffsetFreqStart, UInt16 lutAddressOffsetFreqSlope, UInt16 lutAddressOffsetIdleTime, UInt16 lutAddressOffsetAdcStartTime, UInt16 lutAddressOffsetTxEn, UInt16 lutAddressOffsetBpmVal, UInt16 lutAddressOffsetTx0PhShift, UInt16 lutAddressOffsetTx1PhShift, UInt16 lutAddressOffsetTx2PhShift, UInt16 lutAddressOffsetTx3PhShift)                                                                                                                                                                                                                                                                                                                                                                -  AdvChirpDynLUTAddOffConfig API used to configure LUT address offset dynamically for each chirp parameters
51. Int32,Int32,Int32,Int32,String& ar1.SetRfTx0BallbreakMonConfig(Char ReportingMode, Double TXReflectionCoeffMagnitudeThreshold, Double MonStartFreqConst, Char TxPowBackoff)                                                                                                  -   SetRfTx0BallbreakMonConfig API which defines that configure the monitors of TX0 transmitter balls and impedance matching and report the soft results from monitor
52. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfTempMonConfig(Char ReportingMode, Int16 AnaTempThreshMin, Int16 AnaTempThreshMax, Int16 Reserved1, Int16 Reserved2, Int16 TempDiffThresh)                                                                                                                                                               -  SetRfTempMonConfig API which defines that configure the information related to temperature monitoring and report the soft results from monitor
53. Int32 ar1.CaptureCardConfig_ResetFPGA()                                      -  CaptureCardConfig_ResetFPGA API API Used to reset the RF Data capture card FPGA device
54. Int32 ar1.LbBurstCfgSet_mult(UInt32 RadarDeviceId, Byte LoopBackSelect, Byte BaseProfileIndex, Byte BurstIndex, Byte Reserved, Double FreqConst, Single SlopeConst, Byte Reserved2, UInt32 TxBackOff, UInt16 RxGain, Byte TxEnable, Byte Reserved3, UInt16 BPMConfig, UInt16 DigitalCorrectionDisable, Byte IFLoopBackFreq, Byte IFLoopBackMagnitude, Byte CommonLoopBackGain, Byte AdvLOLoopBackGain, UInt32 AdvLOLoopBackFreq, Byte Reserved4, UInt32 AdvPALoopBackFreq, Byte AdvPALoopBackGain)                                                                                                                                                                                                                                                                                                                                                                                                                         -  LbBurstCfgSet API used for introduce loop back chirps within the on
55. Int32 ar1.SetCalibDataSaveConfig_mult(UInt16 RadarDeviceId, UInt16 ChunkID, UInt16 Reserved, String CalibStoreFilePath)                                              -  SetCalibDataSaveConfig API used to read the calibration data from device
56. Int32 ar1.DownloadDSPFw_mult(UInt32 RadarDeviceId, String path)              -  Download DSP firmware
57. Int32 ar1.SetCalMonTimeUnitConfig(UInt16 CalibMonTimeUnit, Char NumCascadeDevices, Char DeviceId, Char MonitorMode)                                          -   SetCalMonTimeUnitConfig API which defines calibration and monitoring time unit configuration
58. Int32 ar1.Disconnect()                                                       -  Disconnect from the board
59. Int32,String& ar1.GetPMICBuck2_mult(UInt32 RadarDeviceId)                    -  Get the PMIC Buck2 voltage
60. Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfTx0IntAnaSignalsMonConfig(Char ProfileIndex, Char ReportingMode)                                            -  SetRfTx0IntAnaSignalsMonConfig API which defines that configure the information related to TX0 internal analog signals monitoring and report the soft results from monitor
61. Int32 ar1.RfInitCalibConfig(UInt32 LODist, UInt32 RXADCDC, UInt32 HPFCutoff, UInt32 LPFCutoff, UInt32 PeakDetector, UInt32 TXPower, UInt32 RXGain, UInt32 RXIQMM, UInt32 txCalibCfg)                                                                                                           -   RfInitCalibConfig API which defines calibration and monitoring RF initialization configuration
62. Int32 ar1.SetIdleTimeAdvChirpConfigLUT(UInt16 IdleTimeLUTAddOff, Byte IdleTimeNumParams, Byte IdleTimeParamSize, Byte IdleTimeParamScale, Double IdleTimeData1, Double IdleTimeData2, Double IdleTimeData3, Double IdleTimeData4)                                                                                                                                                        -  Idle time Advanced Chirp LUT configuration API
63. Int32 ar1.LVDSLaneConfig_mult(UInt16 RadarDeviceId, UInt16 laneFrmtCfg, UInt16 lane1En, UInt16 lane2En, UInt16 lane3En, UInt16 lane4En, UInt16 msbFst, UInt16 pktEndPls, UInt16 crcEn)                                                                                                             -  LVDSLaneConfig API Defines the device data format configuration
64. Int32 ar1.SetGlobalTimeout(UInt32 timeoutinMs)                               -  API to set the Global timeout for async events
65. Int32 ar1.IsConnected()                                                      -  IsConnected
66. Int32 ar1.SetProgFiltCoeffRam101to104(Int16 FirstCoeff, Int16 SecondCoeff, Int16 ThirdCoeff, Int16 FourthCoeff)                                      -  SetProgFiltCoeffRam101to104 API Defines externally program the filter coeff RAM from 1 to 10
67. Int32 ar1.SetRfTx2PhShiftMonConfig(Byte ProfileIndex, Byte ReportingMode, Double MonChirpSlope, Byte PhaseEn, Byte RxChannel, Double PhShifterIncVal1, Double PhShifterIncVal2, Double PhShifterIncVal3, Double PhShifterIncVal4, Double PhShifterMonVal1, Double PhShifterMonVal2, Double PhShifterMonVal3, Double PhShifterMonVal4, Double TxPhaseErrorThreshold, Double TxAmplitudeErrorThreshold)                                                                                                                                                                                                                                                                                                                            -  SetRfTx2PhShiftMonConfig API is a monitoring configuration API containing information related to TX2 TX loop back based phase shifter monitoring
68. Int32 ar1.CaptureCardConfig_StartRecord_ContinuousStreamData(String ADCFileName, Byte PktSeqEnaDisable)                              -  CaptureCardConfig_StartRecord_ContinuousStreamData API defines Capture the ADC Data from continuous streaming from DCA1000 device
69. Int32 ar1.ProcessContStreamADCData(String ADCFileName)                       -  ProcessContStreamADCData API defines Processing and displaying ADC Data of Continuous streaming
70. Int32,String& ar1.GetCaptureCardFPGAVersion_WithoutSPI()                     -  Get RF Data Capture Card FPGA Version
71. Int32 ar1.SetDebugSignalsConfig(Byte ClkOut, Byte ADCStart)                  -  SetDebugSignalsConfig API used to enable the Debug signals for the chirp cycle
72. Int32 ar1.RfInitCalibConfig_mult(UInt16 RadarDeviceId, UInt32 LODist, UInt32 RXADCDC, UInt32 HPFCutoff, UInt32 LPFCutoff, UInt32 PeakDetector, UInt32 TXPower, UInt32 RXGain, UInt32 RXIQMM, UInt32 txCalibCfg)                                                                                                                                      -   RfInitCalibConfig API which defines calibration and monitoring RF initialization configuration
73. Int32,Int32,String& ar1.SetRfDigMonPeriodicConfig(Char ReportingMode, UInt32 Reserved, UInt32 PeriodiDigitalMonEn, UInt32 Reserved2)                                                           -   SetRfDigMonPeriodicConfig API which defines that configure the of all periodic digital monitoring within Radar sub system
74. Int32 ar1.CaptureCard_DisConnect()                                           -  CaptureCard_DisConnect API used to disconnect the socket 
75. Int32 ar1.SetExternalGpAdcConfig_mult(UInt16 RadarDeviceId, UInt16 SigInputEna, UInt16 SigBufEna, UInt16 ANATest1Cfg, UInt16 ANATest2Cfg, UInt16 ANATest3Cfg, UInt16 ANATest4Cfg, UInt16 ANAMuxCfg, UInt16 VSenseCfg, UInt16 Reserved1, UInt32 Reserved2, UInt32 Reserved3, UInt32 Reserved4)                                                                                                                                                                                                                    -  SetExternalGpAdcConfig API Defines Enables the GPADC reads for external inputs
76. Int32 ar1.RfSetPdTrimConfig_mult(UInt16 RadarDeviceId, Char PDInstance, Char RFInPowerIndex, Char RFInPowerOn, Char Mode)                                                -  RfSetPdTrimConfig API used to trim peak detectors
77. Int32,Int32,UInt32& ar1.GetRFBootupStatus_mult(UInt16 RadarDeviceId)         -  GetRFBootupStatus_mult
78. Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfPmClkLoIntAnaSignalsMonConfig_mult(UInt16 RadarDeviceId, Int32 ProfileIndex, UInt32 ReportingMode)                                                                              -  SetRfPmClkLoIntAnaSignalsMonConfig API which defines that configure the information related to Power management, clock generation and LO distribution circuits internal annalog signal monitoring and report the soft results from monitor
79. Void ar1.Error(String msg)                                                   -  Display an error message
80. Int32,Int32,Int32,Double& ar1.gpadcMeasurement(UInt32 RFGPADCConfigValue, Byte RFGPADCParamValue, Byte RFGPADCNumOfSamples, Byte RFGPADCNumOfSkipSamplesMant, Byte RFGPADCNumOfSkipSamplesExp)                                                                                                                     -  gpadcMeasurement API Defines to read the GPADC data for specified sensor in RF device
81. Int32,String& ar1.GetPMICBuck3_mult(UInt32 RadarDeviceId)                    -  Get the PMIC Buck3 voltage
82. Int32 ar1.SetInternalRfCfg(UInt16 profId, UInt32 address, UInt32 value, UInt16 start_bit, UInt16 end_bit)                                -  SetInternalRfCfg
83. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfRxIfStageMonConfig(Char ProfileIndex, Char ReportingMode, UInt16 HPFCutofFreqErrorThreshold, Double LPFCutoffBandedgeThreshold, Double LPFCutoffStopbandThreshold, Double IFAGainErrorThreshold)                                                                                                                                                                                                                                                                                                                      -  SetRfRxIfStageMonConfig API which defines that configure the manitor of reciever IF filter attenuation and report the soft results from monitor
84. Int32 ar1.CaptureCardConfig_StopRecord()                                     -  CaptureCardConfig_StopRecord API Used to stop record the ADC data from RF capture card
85. Boolean ar1.UnLoadTsDll()                                                    -  Unload the Trioscope DLL from memory
86. Int32 ar1.SetMonTypeTriggerConfig_mult(UInt16 RadarDeviceId, Char triggerType0, Char triggerType1, Char triggerType2)                                            -   SetMonTypeTriggerConfig_mult API which defines the control sequence of execution of monitors
87. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.MeasureTheTxPowerConfig_mult(UInt16 RadarDeviceId, Char NumberOfAccumulations, Char NumberOfSamples)                                                                                                                                       -  MeasureTheTxPower API used to measure the TX output power using the onchip peak detectors
88. Int32 ar1.TransferFilesUsingWinSCP_mult(UInt16 RadarDeviceId)                -  API to transfer all the captured files present in the /mnt/ssd folder of the capture card using WinSCP
89. Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetMeasPdPowerConfig_mult(UInt16 RadarDeviceId, Char PDId, Char PDLNAGainIndex, Char NumAccumulations, Char NumSamples, Byte PDType, Byte pdSel, Byte pdDacVal, Byte paramVal, UInt32 Reserved)                                                                                                                                                                      -  SetMeasPdPowerConfig API used to measure the peak detectors power
90. Int32,String& ar1.GetInternalRfCfg(UInt16 ProfileIDValue, UInt32 address, UInt16 start_bit, UInt16 end_bit)                                  -  GetInternalRfCfg
91. Int32 ar1.SetRfTx1PhShiftMonConfig_mult(UInt16 RadarDeviceId, Byte ProfileIndex, Byte ReportingMode, Double MonChirpSlope, Byte PhaseEn, Byte RxChannel, Double PhShifterIncVal1, Double PhShifterIncVal2, Double PhShifterIncVal3, Double PhShifterIncVal4, Double PhShifterMonVal1, Double PhShifterMonVal2, Double PhShifterMonVal3, Double PhShifterMonVal4, Double TxPhaseErrorThreshold, Double TxAmplitudeErrorThreshold)                                                                                                                                                                                                                                                                                                                                                       -  SetRfTx1PhShiftMonConfig API is a monitoring configuration API containing information related to TX1 TX loop back based phase shifter monitoring
92. Int32 ar1.CaptureCardConfig_StartRecord_WithoutSPI(String ADCFileName, Byte PktSeqEnaDisable)                    -  CaptureCardConfig_StartRecord_WithoutSPI API used to start record the ADC data from RF capture card
93. Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfTx0PowMonConfig_mult(UInt16 RadarDeviceId, Char ProfileIndex, Char RF1FreqBitMask, Char RF2FreqBitMask, Char RF3FreqBitMask, Char ReportingMode, Double TxPowerAbsoluteErrorThreshold, Double TxPowerFlatnessErrorThreshold, Double TxPowerOffsetRF1, Double TxPowerOffsetRF2, Double TxPowerOffsetRF3)                                                                                                                                                                                                                                                                                         -   SetRfTx0PowMonConfig API which defines that configure the monitors of TX0 transmitter output power and report the soft results from monitor
94. Int32 ar1.SetInternalCfg_mult(UInt16 RadarDeviceId, UInt32 RegAddress, UInt32 Regvalues)               -  Set Internal Cfg of register through SPI
95. Int32 ar1.StopFrame(UInt16 startStop)                                        -  StopFrame
96. Int32,String& ar1.GetPMICBuck0_mult(UInt32 RadarDeviceId)                    -  Get the PMIC Buck0 voltage
97. Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfTx2IntAnaSignalsMonConfig_mult(UInt16 RadarDeviceId, Char ProfileIndex, Char ReportingMode)                                                                       -  SetRfTx2IntAnaSignalsMonConfig API which defines that configure the information related to TX2 internal analog signals monitoring and report the soft results from monitor
98. Int32 ar1.SetProgFiltCoeffRam71to80(Int16 FirstCoeff, Int16 SecondCoeff, Int16 ThirdCoeff, Int16 FourthCoeff, Int16 FifthCoeff, Int16 SixthCoeff, Int16 SeventhCoeff, Int16 EigthCoeff, Int16 NinethCoeff, Int16 TenthCoeff)                                                                                                                                                   -  SetProgFiltCoeffRam71to80 API Defines externally program the filter coeff RAM from 1 to 10
99. Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetMeasPdPowerConfig(Char PDId, Char PDLNAGainIndex, Char NumAccumulations, Char NumSamples, Byte PDType, Byte pdSel, Byte pdDacVal, Byte paramVal, UInt32 Reserved)                                                                                                                                           -  SetMeasPdPowerConfig API used to measure the peak detectors power
100. Int32 ar1.SetProgFiltCoeffRam1to10_mult(UInt16 RadarDeviceId, Int16 FirstCoeff, Int16 SecondCoeff, Int16 ThirdCoeff, Int16 FourthCoeff, Int16 FifthCoeff, Int16 SixthCoeff, Int16 SeventhCoeff, Int16 EigthCoeff, Int16 NinethCoeff, Int16 TenthCoeff)                                                                                                                                                                              -  SetProgFiltCoeffRam1to10 API Defines externally program the filter coeff RAM from 1 to 10
101. Void ar1.HideGui()                                                          -  Hide the AutoRadar AR1xxx FW User interface
102. Int32,String& ar1.GetCaptureCardFPGAVersion()                               -  Get RF Data Capture Card FPGA Version
103. Int32 ar1.PostProcPreConfigure_Plots(UInt32 top_left_plot, UInt32 top_left_channel, UInt32 top_right_plot, UInt32 top_right_channel, UInt32 bottom_left_plot, UInt32 bottom_left_channel, UInt32 bottom_right_plot, UInt32 bottom_right_channel)                                                                                                                                                                        -  change the diffrent plots present in the postproc output, 1: 2D FFT amplitude profile , 2: Range
104. Int32 ar1.SetProgFiltCoeffRamClear()                                        -  SetProgFiltCoeffRamClear API Defines externally program the filter coeff RAM values cleared 
105. Int32 ar1.PowerSaveModeConfig_mult(UInt16 RadarDeviceId, Int32 PowerSaveMode)     -  Power Save Mode Config API which defines power saving modes and API configuration
106. Int32,Int32,Int32,Int32,String& ar1.RunTimeCalibConfTrig(UInt32 OneTimeCalibLODist, UInt32 OneTimeCalibTXPower, UInt32 OneTimeCalibRXGain, UInt32 OneTimeCalibPDCal, UInt32 OneTimeCalibTxPhShift, UInt32 PeriodicCalibLODist, UInt32 PeriodicCalibTXPower, UInt32 PeriodicCalibRXGain, UInt32 PeriodicCalibPDCal, UInt32 PeriodicCalibTxPhShift, UInt32 CalibPeriodicity, Char CalReport, Char TxPowerCalMode, Char TXTempIdxOverrideEn, Char RXTempIdxOverrideEn, Char LODISTTempIdxOverrideEn, Char TXPhaseTempIdxOverrideEn, Char TXCalTempIdx, Char RXCalTempIdx, Char LODISTCalTempIdx, Char TXPhaseTempIdxunTimeCalibConfTrig API which defines calibration and monitoring RF Run Time configuration
107. Int32 ar1.SetDynamicPowerSaveMode_mult(UInt32 RadarDeviceId, UInt16 BlockCfgTX, UInt16 BlockCfgRX, UInt16 BlockCfgLODist)                                                 -  SetDynamicPowerSaveMode configuration API which defines enable Dynamic Power Save Mode
108. Int32 ar1.SetProgFiltCoeffRam81to90(Int16 FirstCoeff, Int16 SecondCoeff, Int16 ThirdCoeff, Int16 FourthCoeff, Int16 FifthCoeff, Int16 SixthCoeff, Int16 SeventhCoeff, Int16 EigthCoeff, Int16 NinethCoeff, Int16 TenthCoeff)                                                                                                                                                    -  SetProgFiltCoeffRam81to90 API Defines externally program the filter coeff RAM from 1 to 10
109. Int32 ar1.AdvanceFrameConfig_mult(UInt16 RadarDeviceId, UInt32 NumOfSubFrames, UInt16 ForceProfile, UInt16 SF1ForceProfileIdx, UInt16 SF1ChirpStartIdx, UInt16 SF1NumOfChirps, UInt16 SF1NumOfLoops, UInt32 SF1BurstPeriodicity, UInt16 SF1ChirpStartIdxOffset, UInt16 SF1NumOfBurst, UInt16 SF1NumOfBurstLoops, UInt32 SF1SubFramePeriodicity, UInt16 SF2ForceProfileIdx, UInt16 SF2ChirpStartIdx, UInt16 SF2NumOfChirps, UInt16 SF2NumOfLoops, UInt32 SF2BurstPeriodicity, UInt16 SF2ChirpStartIdxOffset, UInt16 SF2NumOfBurst, UInt16 SF2NumOfBurstLoops, UInt32 SF2SubFramePeriodicity, UInt16 SF3ForceProfileIdx, UInt16 SF3ChirpStartIdx, UInt16 SF3NumOfChirps, UInt16 SF3NumOfLoops, UInt32 SF3BurstPeriodicity, UInt16 SF3ChirpStartIdxOffset, UInt16 SF3NumOfBurst, UInt16 SF3NumOfBurstLoops, UInt32 SF3SubFramePeriodicity, UInt16 SF4ForceProfileIdx, UInt16 SF4ChirpStartIdx, UInt16 SF4NumOfChirps, UInt16 SF4NumOfLoops, UInt32 SF4BurstPeriodicity, UInt16 SF4ChirpStartIdxOffset, UInt16 SF4NumOfBurst, UInt16 SF4NumOfBurstLoops, UInt32 SF4SubFramePeriodicity, UInt16 NumOfFrames, UInt16 TriggerSelect, UInt32 FrameTrigDelay, Byte NumOfCloneSubFrames, UInt32 SF1TotalChirps, UInt16 SF1NumOfAdcSamples, Byte SF1NumOfChirpsInDataPacket, UInt32 SF2TotalChirps, UInt16 SF2NumOfAdcSamples, Byte SF2NumOfChirpsInDataPacket, UInt32 SF3TotalChirps, UInt16 SF3NumOfAdcSamples, Byte SF3NumOfChirpsInDataPacket, UInt32 SF4TotalChirps, UInt16 SF4NumOfAdcSamples, Byte SF4NumOfChirpsInDataPacket)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  -  AdvanceFrameConfig API Defines advanced frame configuration
110. Int32 ar1.SetupTSW1400()                                                    -  SetupTSW1400
111. Int32 ar1.gpioSetValue(UInt32 RadarDeviceId, UInt32 gpioBase, UInt32 gpioPin, UInt32 gpioVal)                     -  gpioSetValue API is used to set the GPIO value for the given configuration
112. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.RxGainTempLutGet(Char ProfileIndex)                                                                                               -   RxGainTempLutGet API used to read the RX gain temperature LUT used by the firmware
113. Int32 ar1.CaptureCardConfig_ResetFPGA_WithoutSPI()                          -  CaptureCardConfig_ResetFPGA_WithoutSPI API API Used to reset the RF Data capture card FPGA device
114. Int32 ar1.SetTx0PhShiftAdvChirpConfigLUT(UInt16 TX0PhShiftLUTAddOff, Byte TX0PhShiftNumParams, Double TX0PhShiftData1, Double TX0PhShiftData2, Double TX0PhShiftData3, Double TX0PhShiftData4)                                                                                                                      -  Tx0 Phase shifter Advanced Chirp LUT configuration API
115. Int32 ar1.SetProgFiltCoeffRam41to50_mult(UInt16 RadarDeviceId, Int16 FirstCoeff, Int16 SecondCoeff, Int16 ThirdCoeff, Int16 FourthCoeff, Int16 FifthCoeff, Int16 SixthCoeff, Int16 SeventhCoeff, Int16 EigthCoeff, Int16 NinethCoeff, Int16 TenthCoeff)                                                                                                                                                                               -  SetProgFiltCoeffRam41to50 API Defines externally program the filter coeff RAM from 1 to 10
116. Int32 ar1.SetCalMonFreqLimitConfig(Double FreqLimitLow, Double FreqLimitHigh, Byte Vco2RangeCfg)                        -   SetCalMonFreqLimitConfig API which defines Radar RF calibration and monitoring frequency limit
117. Int32,String& ar1.GetPMICBuck1_mult(UInt32 RadarDeviceId)                   -  Get the PMIC Buck1 voltage
118. Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfGpadcIntAnaSignalsMonConfig_mult(UInt16 RadarDeviceId, Char ReportingMode)                                                 -  SetRfGpadcIntAnaSignalsMonConfig API which defines that configure the information related to GPADC internal annalog signal monitoring and report the soft results from monitor
119. Int32 ar1.SelectBurst(Double frameslider_val, Double subframeslider_val, Double burstslider_val, Double burstloopslider_val, Double chirpTypeslider_val, Double chirpSlider_val)                                                                                                        -  Selection of Burst
120. Int32 ar1.SetRfInterRxGainPhFreqConfig_mult(UInt16 RadarDeviceId, Char ProfileIndex, Char RxGainCompEn, Char RxPhaseCompEn, Char RxDelayCompEn, Char RxFreqCompEn, Char TxFreqCompEn, Double Rx0DigitalGain, Double Rx1DigitalGain, Double Rx2DigitalGain, Double Rx3DigitalGain, Double Rx0DigitalPhaseShift, Double Rx1DigitalPhaseShift, Double Rx2DigitalPhaseShift, Double Rx3DigitalPhaseShift, Double Rx0DigitalDelay, Double Rx1DigitalDelay, Double Rx2DigitalDelay, Double Rx3DigitalDelay, Double Rx0DigitalFreqShift, Double Rx1DigitalFreqShift, Double Rx2DigitalFreqShift, Double Rx3DigitalFreqShift, Double TX0DigitalFreqShift, Double TX1DigitalFreqShift, Double TX2DigitalFreqShift, Double TX3DigitalFreqShiftetRfInterRxGainPhFreqConfig API which used to induce diffwrent gain or phase or frequency offsets on the different RXs, for inter
121. Int32 ar1.SetPMICBuck2(Double iBuck2Voltage)                                -  Set the PMIC Buck2 voltage
122. Int32 ar1.SelectCaptureDevice(String DeviceType)                            -  Select capture device type either TSW1400 or DCA1000 or TDA2XX
123. Int32 ar1.WriteBlock(UInt32 abs_addr, UInt32 num_of_dwords, String filename)    -  Write a block of registers
124. Int32 ar1.SetProgFiltCoeffRamApply_mult(UInt16 RadarDeviceId)               -  SetProgFiltCoeffRam API Defines externally program the filter coeff RAM
125. Int32 ar1.CSI2LaneConfig(UInt16 CSI2DataLane0Pos, UInt16 CSI2DataLane0Pol, UInt16 CSI2DataLane1Pos, UInt16 CSI2DataLane1Pol, UInt16 CSI2DataLane2Pos, UInt16 CSI2DataLane2Pol, UInt16 CSI2DataLane3Pos, UInt16 CSI2DataLane3Pol, UInt16 CSI2ClockPos, UInt16 CSI2ClockPol, Char CSI2LineStartEndDis)                                                                                                                                                                                                                            -  CSI2LaneConfig
126. Int32,Int32,Double& ar1.GetTemperatureSensorData()                          -  GetTemperatureSensorDataRead
127. Int32 ar1.AdvChirpLUTConfig(UInt16 lutAddressOffset, UInt16 numBytes)       -  Advanced Chirp LUT configuration API
128. Int32 ar1.DownloadBssFwOvSPI(String FwPath)                                 -  DownloadBssFwOvSPI
129. String ar1.GetBSSFwPath()                                                   -  Get the path of the BSS firmware
130. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.TxGainTempLutGet(Char ProfileIndex)                                                                                                                                                                                                                                                                                                                                   -   TxGainTempLutGet API used to read the TX gain temperature LUT used by the firmware
131. Int32 ar1.SetCSI2DelayConfig(Byte enableDelayDummy, UInt16 delayVal, UInt16 dummyVal)             -  SetCSI2DelayConfig API used to increase the time between the availability of chirp data and the transfer of chirp data over CSI2 interface
132. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfMixerInpPowMonConfig(Char ReportingMode, Char ProfileIndex, Char Tx1Enable, Char Tx2Enable, Char Tx3Enable, UInt32 Thresholds)                                                                                                                       -  SetRfMixerInpPowMonConfig API which defines that configure related information to Rx mixer input power monitoring
133. Int32,String& ar1.GetCaptureCardDllVersion()                                -  Get RF Data Capture Card dll Version
134. Int32 ar1.MeasureNF(String ADCFileName, UInt32 RxChain, Single ToneFreq)    -  MeasureGain API defines measure the Noise figure
135. Int32 ar1.CaptureCardConfig_EthInit(String SystemSourceIPAddress, String FPGADestIPAddress, String FPGAMACAddress, UInt32 ConfigPort, UInt32 RecordPort)                                                                                -  CaptureCardConfig_EthInit API used to ethernet initialization
136. String ar1.GuiVersion()                                                     -  Displays the AutoRadar AR1xxx GUI version
137. Int32 ar1.SetCalibDisableConfig(UInt32 GPADCTemp, UInt32 APLLCal, UInt32 Synth1Cal, UInt32 Synth2Cal, UInt32 PDTrimEfuse, UInt32 Synth3Cal)                                                                   -  SetCalibDisableConfig API used to enable or disable the GPADC Temp, APLL, Synth1 and Synth2 and PD Trim from Efuse calibration during boot time and run time of BSS for testing purpose
138. Int32 ar1.DisableMonitoringLogging(UInt32 mode)                             -  Disable/Enable the logging of Monitoring Reports in the Output Console
139. Int32 ar1.SetPMICBuck3(Single iBuck3Voltage)                                -  Set the PMIC Buck3 voltage
140. Boolean ar1.Calling_IsConnected()                                           -  return if Connected to the board or not
141. Int32 ar1.SetTx1PhShiftAdvChirpConfigLUT(UInt16 TX1PhShiftLUTAddOff, Byte TX1PhShiftNumParams, Double TX1PhShiftData1, Double TX1PhShiftData2, Double TX1PhShiftData3, Double TX1PhShiftData4)                                                                                                                      -  Tx1 Phase shifter Advanced Chirp LUT configuration API
142. Int32,Int32,Int32,Int32,Int32,String& ar1.PowerOn_mult(UInt16 RadarDeviceId, UInt16 crcType, UInt16 ackTimeout, Char trasportType, UInt32 portNum)                                                                          -  PowerOn_mult
143. Int32,Int32,Int32,String& ar1.SetRfOverrideDitherMonConfig(Char MonIdx, Char MonStartFreqEn, Char MonSlopeEn, Char MonTxBackOffOverrideEn, Double RF1MonStartFreq, Double RF2MonStartFreq, Double RF3MonStartFreq, Double RF1MonSlope, Double RF2MonSlope, Double RF3MonSlope, Char TxBckOverrideSlice, Char FreqDitherCtrl, Char TimeDitherCtrl, Int16 RF1MinDitherFreq, Int16 RF2MinDitherFreq, Int16 RF3MinDitherFreq, Int16 RF1MaxDitherFreq, Int16 RF2MaxDitherFreq, Int16 RF3MaxDitherFreq, Char MinTimeDelay, Char MaxTimeDelay)                                                                                                                                                                                                                                                                                                                                                                                                                                                               -   SetRfOverrideDitherMonConfig API  which defines that configure the monitors for OverRide and Dither configuration
144. Int32 ar1.DynChirpCfgSet_mult(UInt16 RadarDeviceId, Byte ChirpRowSelect, Byte ChirpSegmentSelect, UInt16 ProgramMode, UInt32 Chirp1R1Conf, UInt32 Chirp1R2Conf, UInt32 Chirp1R3Conf, UInt32 Chirp2R1Conf, UInt32 Chirp2R2Conf, UInt32 Chirp2R3Conf, UInt32 Chirp3R1Conf, UInt32 Chirp3R2Conf, UInt32 Chirp3R3Conf, UInt32 Chirp4R1Conf, UInt32 Chirp4R2Conf, UInt32 Chirp4R3Conf, UInt32 Chirp5R1Conf, UInt32 Chirp5R2Conf, UInt32 Chirp5R3Conf, UInt32 Chirp6R1Conf, UInt32 Chirp6R2Conf, UInt32 Chirp6R3Conf, UInt32 Chirp7R1Conf, UInt32 Chirp7R2Conf, UInt32 Chirp7R3Conf, UInt32 Chirp8R1Conf, UInt32 Chirp8R2Conf, UInt32 Chirp8R3Conf, UInt32 Chirp9R1Conf, UInt32 Chirp9R2Conf, UInt32 Chirp9R3Conf, UInt32 Chirp10R1Conf, UInt32 Chirp10R2Conf, UInt32 Chirp10R3Conf, UInt32 Chirp11R1Conf, UInt32 Chirp11R2Conf, UInt32 Chirp11R3Conf, UInt32 Chirp12R1Conf, UInt32 Chirp12R2Conf, UInt32 Chirp12R3Conf, UInt32 Chirp13R1Conf, UInt32 Chirp13R2Conf, UInt32 Chirp13R3Conf, UInt32 Chirp14R1Conf, UInt32 Chirp14R2Conf, UInt32 Chirp14R3Conf, UInt32 Chirp15R1Conf, UInt32 Chirp15R2Conf, UInt32 Chirp15R3Conf, UInt32 Chirp16R1Conf, UInt32 Chirp16R2Conf, UInt32 Chirp16R3ConfynChirpCfgSet API used to dynamically change chirp configuration while frame are on going
145. Int32 ar1.AddDevice(UInt16 RadarDeviceId)                                   -  AddDevice API used to connect slave devices through SPI
146. Int32 ar1.ContStrModDisable()                                               -  Continuous Streming Mode disable API defines Configuration needed to disable the continuous streaming mode from the device
147. Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfTx0PowMonConfig(Char ProfileIndex, Char RF1FreqBitMask, Char RF2FreqBitMask, Char RF3FreqBitMask, Char ReportingMode, Double TxPowerAbsoluteErrorThreshold, Double TxPowerFlatnessErrorThreshold, Double TxPowerOffsetRF1, Double TxPowerOffsetRF2, Double TxPowerOffsetRF3)                                                                                                                                                                                                                                                               -   SetRfTx0PowMonConfig API which defines that configure the monitors of TX0 transmitter output power and report the soft results from monitor
148. Void ar1.Warning(String msg)                                                -  Display a warning message
149. Int32 ar1.SetCalibDisableConfig_mult(UInt16 RadarDeviceId, UInt32 GPADCTemp, UInt32 APLLCal, UInt32 Synth1Cal, UInt32 Synth2Cal, UInt32 PDTrimEfuse, UInt32 Synth3Cal)                                                                                              -  SetCalibDisableConfig API used to enable or disable the GPADC Temp, APLL, Synth1, Synth2 and PD Trim from Efuse calibration during boot time and run time of BSS for testing purpose
150. Int32 ar1.DisableTestSource_mult(UInt16 RadarDeviceId, UInt16 mode)         -  DisableTestSource
151. String ar1.GetDieId()                                                       -  Get the DieId which consist of Lot , waper, DevX and DevY information
152. Int32 ar1.SetRfTx1PhShiftMonConfig(Byte ProfileIndex, Byte ReportingMode, Double MonChirpSlope, Byte PhaseEn, Byte RxChannel, Double PhShifterIncVal1, Double PhShifterIncVal2, Double PhShifterIncVal3, Double PhShifterIncVal4, Double PhShifterMonVal1, Double PhShifterMonVal2, Double PhShifterMonVal3, Double PhShifterMonVal4, Double TxPhaseErrorThreshold, Double TxAmplitudeErrorThreshold)                                                                                                                                                                                                                                                                                                                             -  SetRfTx1PhShiftMonConfig API is a monitoring configuration API containing information related to TX1 TX loop back based phase shifter monitoring
153. Int32 ar1.SetPMICBuck0(Double iBuck0Voltage)                                -  Set the PMIC Buck0 voltage
154. Int32 ar1.DynChirpCfgSet(Byte ChirpRowSelect, Byte ChirpSegmentSelect, UInt16 ProgramMode, UInt32 Chirp1R1Conf, UInt32 Chirp1R2Conf, UInt32 Chirp1R3Conf, UInt32 Chirp2R1Conf, UInt32 Chirp2R2Conf, UInt32 Chirp2R3Conf, UInt32 Chirp3R1Conf, UInt32 Chirp3R2Conf, UInt32 Chirp3R3Conf, UInt32 Chirp4R1Conf, UInt32 Chirp4R2Conf, UInt32 Chirp4R3Conf, UInt32 Chirp5R1Conf, UInt32 Chirp5R2Conf, UInt32 Chirp5R3Conf, UInt32 Chirp6R1Conf, UInt32 Chirp6R2Conf, UInt32 Chirp6R3Conf, UInt32 Chirp7R1Conf, UInt32 Chirp7R2Conf, UInt32 Chirp7R3Conf, UInt32 Chirp8R1Conf, UInt32 Chirp8R2Conf, UInt32 Chirp8R3Conf, UInt32 Chirp9R1Conf, UInt32 Chirp9R2Conf, UInt32 Chirp9R3Conf, UInt32 Chirp10R1Conf, UInt32 Chirp10R2Conf, UInt32 Chirp10R3Conf, UInt32 Chirp11R1Conf, UInt32 Chirp11R2Conf, UInt32 Chirp11R3Conf, UInt32 Chirp12R1Conf, UInt32 Chirp12R2Conf, UInt32 Chirp12R3Conf, UInt32 Chirp13R1Conf, UInt32 Chirp13R2Conf, UInt32 Chirp13R3Conf, UInt32 Chirp14R1Conf, UInt32 Chirp14R2Conf, UInt32 Chirp14R3Conf, UInt32 Chirp15R1Conf, UInt32 Chirp15R2Conf, UInt32 Chirp15R3Conf, UInt32 Chirp16R1Conf, UInt32 Chirp16R2Conf, UInt32 Chirp16R3Conf)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       -  DynChirpCfgSet API used to dynamically change chirp configuration while frame are on going
155. Int32 ar1.SetProgFiltCoeffRam61to70_mult(UInt16 RadarDeviceId, Int16 FirstCoeff, Int16 SecondCoeff, Int16 ThirdCoeff, Int16 FourthCoeff, Int16 FifthCoeff, Int16 SixthCoeff, Int16 SeventhCoeff, Int16 EigthCoeff, Int16 NinethCoeff, Int16 TenthCoeff)                                                                                                                                                                               -  SetProgFiltCoeffRam61to70 API Defines externally program the filter coeff RAM from 1 to 10
156. Int32 ar1.SetCalibDataSaveConfig(UInt16 ChunkID, UInt16 Reserved, String CalibStoreFilePath)                    -  SetCalibDataSaveConfig API used to read the calibration data from device
157. Int32 ar1.SetInternalRfCfg_mult(UInt16 RadarDeviceId, UInt16 profId, UInt32 address, UInt32 value, UInt16 start_bit, UInt16 end_bit)                                                            -  SetInternalRfCfg
158. Int32 ar1.DataPathConfig_mult(UInt16 RadarDeviceId, UInt32 intfSel, UInt32 transferFmtPkt0, UInt32 transferFmtPkt1)                                           -  DataPathConfig API Defines the used to configure the device data path
159. Int32 ar1.StopFrame_mult(UInt16 RadarDeviceId, UInt16 startStop)            -  StopFrame
160. Int32 ar1.AdvanceDevFrameConfig(UInt32 NumOfSubFrames, UInt16 SF1NumOfChirps, UInt16 SF1NumOfAdcSamplesPerDataPkt, Byte SF1NumOfChirpsInDataPacket, UInt16 SF2NumOfChirps, UInt16 SF2NumOfAdcSamplesPerDataPkt, Byte SF2NumOfChirpsInDataPacket, UInt16 SF3NumOfChirps, UInt16 SF3NumOfAdcSamplesPerDataPkt, Byte SF3NumOfChirpsInDataPacket, UInt16 SF4NumOfChirps, UInt16 SF4NumOfAdcSamplesPerDataPkt, Byte SF4NumOfChirpsInDataPacket)                                                                                                                                                                                                                                                                                                                                                                  -  AdvanceDevFrameConfig API Defines advance dev frame configuration
161. Int32 ar1.SetTempSensTrimConfig(Int16 TrimTemp1, Int16 TrimTemp2, UInt16 TrimCodeRx1, UInt16 TrimCodeTx1, UInt16 TrimCodePm1, UInt16 TrimCodeDig1, UInt16 TrimCodeRx2, UInt16 TrimCodeTx2, UInt16 TrimCodePm2, UInt16 TrimCodeDig2)                                                                                                                                                           -  SetTempSensTrimConfig API Defines the provides the temperature trim data to BSS
162. Int32 ar1.SetPMICClockOutConfig(Byte PMICClockControl, Byte PMICClockSrc, Byte SrcClockDiv, Byte ModeSelect, UInt32 FreqSlope, Byte MinNDivVal, Byte MaxNDivVal, Byte ClockDitherEna, Byte Reserved)                                                                                                                            -  SetPMICClockOutConfig API used to to configure to set up the desired frequency pf PMIC clock that is output from device
163. Int32 ar1.ChanNAdcConfigMSS_mult(UInt16 RadarDeviceId, UInt16 RxEn, UInt16 BitsVal, UInt16 FmtVal, UInt32 IQSwap, UInt16 ChanIntrlev)                                                             -   MSS API only 
164. Int32 ar1.SetProgFiltCoeffRam11to20_mult(UInt16 RadarDeviceId, Int16 FirstCoeff, Int16 SecondCoeff, Int16 ThirdCoeff, Int16 FourthCoeff, Int16 FifthCoeff, Int16 SixthCoeff, Int16 SeventhCoeff, Int16 EigthCoeff, Int16 NinethCoeff, Int16 TenthCoeff)                                                                                                                                                                               -  SetProgFiltCoeffRam11to20 API Defines externally program the filter coeff RAM from 1 to 10
165. Int32 ar1.selectRadarMode(UInt32 mode)                                      -  Select the Radar Mode
166. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,UInt16& ar1.DFEStaticReportGet_mult(UInt32 RadarDeviceId)                                                                                                                                                                                                                                                                                                                                 -  DFEStaticReportGet_mult
167. Int32 ar1.ChanNAdcConfig_mult(UInt16 RadarDeviceId, UInt16 Tx0En, UInt16 Tx1En, UInt16 Tx2En, UInt16 Tx3En, UInt16 Rx0En, UInt16 Rx1En, UInt16 Rx2En, UInt32 Rx3En, Int32 BitsVal, UInt32 FmtVal, UInt32 IQSwap, UInt16 CasCadeMode)                                                                                                                                                            -   Static device config API which defines configure both the Transmiter and Reciever channels of Radar device and also ADC data format output
168. String ar1.GetMSSFwPath()                                                   -  Get the path of the MSS firmware
169. Int32 ar1.LvdsClkConfig_mult(UInt16 RadarDeviceId, Char laneClk, Char dataRate)       -  LvdsClkConfig API Defines the used to HSI Clock configuration
170. Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfTxNIntAnaSignalsMonConfig(Char ProfileIndex, Char ReportingMode, Char tx0En, Char tx1En, Char tx2En, Char tx3En)                                                                                             -  SetRfTxNIntAnaSignalsMonConfig API which defines that configure the information related to TX3 internal analog signals monitoring and report the soft results from monitor
171. Int32 ar1.SetRfRxIfSatMonConfig_mult(UInt16 RadarDeviceId, Byte ProfileIndex, Byte SatMonSelect, Byte Reserved1, Byte Reserved2, Double SatMonPrimaryTimeSliceDuration, Int16 SatMonNumSlices, Byte SatMonRxChannelMask, Byte Reserved3, Byte Reserved4, Byte Reserved5, UInt32 Reserved6, UInt32 Reserved7)                                                                                                                                                                                                                                    -   SetRfRxIfSatMonConfig API which defines containing information related to RX saturation detector monitoring 
172. Int32 ar1.Disconnect_mult(UInt32 RadarDeviceId)                             -  RadarDeviceId
173. Int32 ar1.AdvChirpConfig(Byte chirpParamIdx, Byte resetMode, Byte paramCtrl, UInt16 deltaResetPeriod, UInt16 deltaParamUpdatePeriod, Int32 sf0ChirpParamDelta, Int32 sf1ChirpParamDelta, Int32 sf2ChirpParamDelta, Int32 sf3ChirpParamDelta, UInt16 lutResetPeriod, UInt16 lutParamUpdatePeriod, UInt16 lutPatternAddressOffset, UInt16 numPatterns, UInt16 lutBurstIndexOffset, UInt16 lutSfIndexOffset, Byte lutChirpParamSize, Byte lutChirpParamScale, UInt16 maxTxPhShifIntDither)                                                                                                                                                                                                                                                                                                                                                                                                               -  Advanced Chirp configuration API
174. Int32 ar1.SetInternalCfg(UInt32 RegAddress, UInt32 Regvalues)               -  Set Internal Cfg of register through SPI
175. Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfSynthLinMonConfig(Char ProfileIndex, Char ReportingMode, UInt16 FreqErrorThreshold, Double Profile0MonStartTime, Double Profile1MonStartTime, Double Profile2MonStartTime, Double Profile3MonStartTime, Double Profile4MonStartTime, Double Profile5MonStartTime, Double Profile6MonStartTime, Char DataPathParams1L1, Char DataPathParams1L2, Char DataPathParams1N, Char DataPathParams2S1, Char DataPathParams2S2, Char DataPathParams2S, Char Profile0LinearityRAMAddress, Char Profile1LinearityRAMAddress, Char Profile2LinearityRAMAddress, Char Profile3LinearityRAMAddress, Char Profile4LinearityRAMAddress, Char Profile5LinearityRAMAddress, Char Profile6LinearityRAMAddress, Byte LinearityDataDumpAddretRfSynthLinMonConfig API used to containing information related to synthesizer frequency error and linearity monitoring during chirping
176. Int32 ar1.SetRfVMONMonConfig(Char VddaBb1P8VVMONNormalEn, Char VddaBb1P8VVMONSelfTestEn, Char VddaBb1P8VVMONNormalRef, Char VddaBb1P8VVMONSelfTestRef, Char VddaVco1P8VVMONNormalEn, Char VddaVco1P8VVMONSelfTestEn, Char VddaVco1P8VVMONNormalRef, Char VddaVco1P8VVMONSelfTestRef, Char VddRf11P0VVMONNormalEn, Char VddRf11P0VVMONSelfTestEn, Char VddRf11P0VVMONNormalRef, Char VddRf11P0VVMONSelfTestRef, Char VddRf21P0VVMONNormalEn, Char VddRf21P0VVMONSelfTestEn, Char VddRf21P0VVMONNormalRef, Char VddRf21P0VVMONSelfTestRef)                                                                                                                                                                                                                                                                                                                                                                                                                                                                -   SetRfVMONMonConfig API which defines as containing information related to VMON monitoring
177. Int32 ar1.SetRFPSLoopbackConfig_mult(UInt16 RadarDeviceId, UInt16 PSLoopBackFreq, UInt16 PSLoopBackEnabled, UInt16 PSLoopBackTXId0, UInt16 PSLoopBackTXId1, UInt16 PGAGainIndex)                                                                                                        -  SetRFPSLoopbackConfig API Defines Enables/Disables PS(Phase shifter) loopback for all enabled profiles and it used to debug both Tx and Rx chains
178. Int32 ar1.TransferFilesUsingWinSCPContStream_mult(UInt16 RadarDeviceId)     -  API to transfer all the captured files present in the /mnt/ssd folder of the capture card using WinSCP for Continous Stream usecase
179. Int32,Int32,Int32,Int32,String& ar1.SetRfRxIntAnaSignalsMonConfig_mult(UInt16 RadarDeviceId, Char ProfileIndex, Char ReportingMode)                                                           -  SetRfRxIntAnaSignalsMonConfig API which defines that configure the information related to RX internal analog signals monitoring and report the soft results from monitor
180. Int32 ar1.RfSetCalMonFreqTxPowLimitConfig(Double FreqLimitLowTx0, Double FreqLimitLowTx1, Double FreqLimitLowTx2, Double FreqLimitLowTx3, Double FreqLimitHighTx0, Double FreqLimitHighTx1, Double FreqLimitHighTx2, Double FreqLimitHighTx3, Double Tx0PowerBackoff, Double Tx1PowerBackoff, Double Tx2PowerBackoff, Double Tx3PowerBackoff, Byte Vco2RangeCfg)                                                                                                                                                                                                                                                                                        -   RfSetCalMonFreqTxPowLimitConfig API which sets the limits for RF frequency transmission for each TX and also Tx power limits
181. Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfTxNPowMonConfig_mult(UInt16 RadarDeviceId, Char ProfileIndex, Char RF1FreqBitMask, Char RF2FreqBitMask, Char RF3FreqBitMask, Char TxSelMask1, Char TxSelMask2, Char TxSelMask3, Char TxSelMask4, Char ReportingMode, Double TxPowerAbsoluteErrorThreshold, Double TxPowerFlatnessErrorThreshold, Double TxPowerOffsetRF1, Double TxPowerOffsetRF2, Double TxPowerOffsetRF3)                                                                                                                                                                                                                                                                                                                                                              -   SetRfTxNPowMonConfig API which defines that configure the monitors of TX2 transmitter output power and report the soft results from monitor
182. String ar1.GetDSPFwVersion()                                                -  Get the version of the FW loaded (and update it in the gui)
183. Int32 ar1.StartFrame_mult(UInt16 RadarDeviceId)                             -  StartFrame
184. Int32 ar1.SetTx3PhShiftAdvChirpConfigLUT(UInt16 TX3PhShiftLUTAddOff, Byte TX3PhShiftNumParams, Double TX3PhShiftData1, Double TX3PhShiftData2, Double TX3PhShiftData3, Double TX3PhShiftData4)                                                                                                                      -  Tx3 Phase shifter Advanced Chirp LUT configuration API
185. Int32,String& ar1.GetInternalCfg_mult(UInt16 RadarDeviceId, UInt32 address, UInt32 StartBit, UInt32 StopBit)                                    -  Get Internal Cfg of register through SPI
186. Int32 ar1.SetRfTxNPhShiftMonConfig_mult(UInt16 RadarDeviceId, Byte ProfileIndex, Byte ReportingMode, Double MonChirpSlope, Byte PhaseEn, Byte RxChannel, Char TxMonPhSelMask1, Char TxMonPhSelMask2, Char TxMonPhSelMask3, Char TxMonPhSelMask4, Double PhShifterIncVal1, Double PhShifterIncVal2, Double PhShifterIncVal3, Double PhShifterIncVal4, Double PhShifterMonVal1, Double PhShifterMonVal2, Double PhShifterMonVal3, Double PhShifterMonVal4, Double TxPhaseErrorThreshold, Double TxAmplitudeErrorThreshold)                                                                                                                                                                                                                                                                                                                                                                                                                                                -  SetRfTxNPhShiftMonConfig API is a monitoring configuration API containing information related to TX2 TX loop back based phase shifter monitoring
187. Int32 ar1.SetMCUClockOutConfig_mult(UInt16 RadarDeviceId, Byte MCUClockControl, Byte MCUClockSrc, Byte SrcClockDiv, Byte Reserved)                                                          -  SetMCUClockOutConfig API used to  configure to set up the desired frequency pf MCU clock that is output from device
188. Int32 ar1.AdvTxGainTempLutSet_mult(UInt16 RadarDeviceId, Char ProfileIndex, Char TxIndex, Char TxGainCodeTempLessThanNeg30, Char TxGainCodeTempNeg30ToNeg20, Char TxGainCodeTempNeg20ToNeg10, Char TxGainCodeTempNeg10To0, Char TxGainCodeTemp0To10, Char TxGainCodeTemp10To20, Char TxGainCodeTemp20To30, Char TxGainCodeTemp30To40, Char TxGainCodeTemp40To50, Char TxGainCodeTemp50To60, Char TxGainCodeTemp60To70, Char TxGainCodeTemp70To80, Char TxGainCodeTemp80To90, Char TxGainCodeTemp90To100, Char TxGainCodeTemp100To110, Char TxGainCodeTemp110To120, Char TxGainCodeTemp120To130, Char TxGainCodeTemp130To140, Char TxGainCodeTempMoreThandvTxGainTempLutSet API used to overwrite the TX gain temperature LUT used in firmware
189. Int32 ar1.SelectChipVersion(String chipName)                                -  Select the specific chip version for matlab configuration such as Profile, chirp and Frame etc
190. Int32 ar1.DynamicChirpEnableCfgSet_mult(UInt16 RadarDeviceId, UInt32 Reserved)      -  DynamicChirpEnableCfgSet API used to trigger the copy of chirp configuration from software to hardware .The copy take place at the end of going frame
191. Int32,Int32,Int32,Double& ar1.gpadcMeasurement_mult(UInt32 RadarDeviceId, UInt32 RFGPADCConfigValue, Byte RFGPADCParamValue, Byte RFGPADCNumOfSamples, Byte RFGPADCNumOfSkipSamplesMant, Byte RFGPADCNumOfSkipSamplesExp)                                                                                                                                                 -  gpadcMeasurement API Defines to read the GPADC data for specified sensor in RF device
192. Int32,Double& ar1.MeasurePowerSpectralDensity(String ADCfilename, Double freq_Start_in_hz, Double Bandwidth_in_hz, UInt32 Rxchain, UInt32 I_or_Q)                                                                         -  The returns the power spectral density(in dBFS/Hz) from Freq_Start_in_hz to (freq_Start_in_hz + Bandwidth_in_hz).
193. Int32 ar1.CaptureCardConfig_PacketDelay(UInt16 packetDelay)                 -  CaptureCardConfig_PacketDelay API used to configure record data packet delay and number of bytes in a data packet sent from FPGA
194. Int32 ar1.DownloadMSSFw(String path)                                        -  Download MSS firmware
195. Int32 ar1.DownloadDSPFw(String path)                                        -  Download DSP firmware
196. Int32,String& ar1.SetRfDigLatentFaultMonEnableConfig_mult(UInt16 RadarDeviceId, UInt32 DigitalMonEnables, Char TestMode, UInt32 Reserved1, UInt32 Reserved2)                                                                                    -   SetRfDigLatentFaultMonEnableConfig API which defines configure the of all digital monitoring
197. Int32 ar1.RfSetCalMonFreqTxPowLimitConfig_mult(UInt16 RadarDeviceId, Double FreqLimitLowTx0, Double FreqLimitLowTx1, Double FreqLimitLowTx2, Double FreqLimitLowTx3, Double FreqLimitHighTx0, Double FreqLimitHighTx1, Double FreqLimitHighTx2, Double FreqLimitHighTx3, Double Tx0PowerBackoff, Double Tx1PowerBackoff, Double Tx2PowerBackoff, Double Tx3PowerBackoff, Byte Vco2RangeCfg)                                                                                                                                                                                                                                                                                                                   -   RfSetCalMonFreqTxPowLimitConfig API which sets the limits for RF frequency transmission for each TX and also Tx power limits
198. Int32 ar1.SaveAdvChirpLUTConfig()                                           -  Save Advanced Chirp LUT configuration API
199. Int32 ar1.SetTempSensTrimConfig_mult(UInt16 RadarDeviceId, Int16 TrimTemp1, Int16 TrimTemp2, UInt16 TrimCodeRx1, UInt16 TrimCodeTx1, UInt16 TrimCodePm1, UInt16 TrimCodeDig1, UInt16 TrimCodeRx2, UInt16 TrimCodeTx2, UInt16 TrimCodePm2, UInt16 TrimCodeDig2)                                                                                                                                                                                      -  SetTempSensTrimConfig API Defines the provides the temperature trim data to BSS
200. Int32 ar1.SetRfRxSigImgMonConfig(Char ProfileIndex, Int16 SigImGMonPriTimeSliceNumSamples, Char SigImGMonNumSlices)                                           -   SetRfRxSigImgMonConfig API which defines containing information related to signal and image band energy
201. Int32 ar1.SetTestPatternConfig_mult(UInt16 RadarDeviceId, Byte TestPatternGenCtl, Byte TestPatternGenTiming, UInt16 TestPatternPktSize, UInt32 NumTestPatternPkts, UInt16 TestPatternRx0ICfg1, UInt16 TestPatternRx0ICfg2, UInt16 TestPatternRx0QCfg1, UInt16 TestPatternRx0QCfg2, UInt16 TestPatternRx1ICfg1, UInt16 TestPatternRx1ICfg2, UInt16 TestPatternRx1QCfg1, UInt16 TestPatternRx1QCfg2, UInt16 TestPatternRx2ICfg1, UInt16 TestPatternRx2ICfg2, UInt16 TestPatternRx2QCfg1, UInt16 TestPatternRx2QCfg2, UInt16 TestPatternRx3ICfg1, UInt16 TestPatternRx3ICfg2, UInt16 TestPatternRx3QCfg1, UInt16 TestPatternRx3QCfg2, UInt32 ReservedetTestPatternConfig API used configurations to set up the test pattern to be generated and transferred over the selected high speed interface(LVDS/CSI2)
202. Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfTx2PowMonConfig(Char ProfileIndex, Char RF1FreqBitMask, Char RF2FreqBitMask, Char RF3FreqBitMask, Char ReportingMode, Double TxPowerAbsoluteErrorThreshold, Double TxPowerFlatnessErrorThreshold, Double TxPowerOffsetRF1, Double TxPowerOffsetRF2, Double TxPowerOffsetRF3)                                                                                                                                                                                                                                                               -   SetRfTx2PowMonConfig API which defines that configure the monitors of TX2 transmitter output power and report the soft results from monitor
203. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfRxIfStageMonConfig_mult(UInt16 RadarDeviceId, Char ProfileIndex, Char ReportingMode, UInt16 HPFCutofFreqErrorThreshold, Double LPFCutoffBandedgeThreshold, Double LPFCutoffStopbandThreshold, Double IFAGainErrorThreshold)                                                                                                                                                                                                                                                                                                                                                  -  SetRfRxIfStageMonConfig API which defines that configure the manitor of reciever IF filter attenuation and report the soft results from monitor
204. Int32 ar1.CaptureCardConfig_PacketDelay_WithoutSPI(UInt16 packetDelay)      -  CaptureCardConfig_PacketDelay_WithoutSPI API used to configure record data packet delay and number of bytes in a data packet sent from FPGA
205. Int32 ar1.RfSetPdTrimConfig(Char PDInstance, Char RFInPowerIndex, Char RFInPowerOn, Char Mode)                      -  RfSetPdTrimConfig API used to trim peak detectors
206. Int32,Int32,String& ar1.SetRfDigMonPeriodicConfig_mult(UInt16 RadarDeviceId, Char ReportingMode, UInt32 Reserved, UInt32 PeriodiDigitalMonEn, UInt32 Reserved2)                                                                                       -   SetRfDigMonPeriodicConfig API which defines that configure the of all periodic digital monitoring within Radar sub system
207. Int32 ar1.BasicConfigurationForAnalysis(UInt32 NumberOfSamples, UInt32 FFTSize, UInt32 NUumberOfAverages, UInt16 WindowSelection, Char RemoveDC, Char EnableTriggerCapture, Char WindowCompensation)                                                                                                                            -  This functions allows the configuration of a set of parameters for the analysis tool and should be called only after the device has been placed in 'continous streaming'mode. This function also programs the HSDCPro to collect the necessary number of samples based on the NumberOfSamplesPerFFT and NumNonCohAverages
208. Int32 ar1.ContStrConfig_mult(UInt16 RadarDeviceId, Double startFreqConst, UInt16 digOutSampleRate, Char rxGain, Char hpfCornerFreq1, Char hpfCornerFreq2, UInt32 tx0OutPowerBackoffCode, UInt32 tx1OutPowerBackoffCode, UInt32 tx2OutPowerBackoffCode, UInt32 tx3OutPowerBackoffCode, UInt16 tx0PhaseShifter, UInt16 tx1PhaseShifter, UInt16 tx2PhaseShifter, UInt16 tx3PhaseShifter, UInt16 ForceVCOSelect, UInt16 MiscFeatEnSelect)                                                                                                                                                                                                                                                                                                                                                             -  Continuous Streming Configuration API defines Configuration of the data path to transfer the captured ADC samples continuously without missing any sample to external Device(host)
209. Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfTx2IntAnaSignalsMonConfig(Char ProfileIndex, Char ReportingMode)                                             -  SetRfTx2IntAnaSignalsMonConfig API which defines that configure the information related to TX2 internal analog signals monitoring and report the soft results from monitor
210. Int32,Int32,Int32,Int32,String& ar1.SetRfTx2BallbreakMonConfig_mult(UInt16 RadarDeviceId, Char ReportingMode, Double TXReflectionCoeffMagnitudeThreshold, Double MonStartFreqConst, Char TxPowBackoff)                                                                                                                              -   SetRfTx2BallbreakMonConfig API which defines that configure the monitors of TX2 transmitter balls and impedance matching and report the soft results from monitor
211. Int32 ar1.nResetCtrl(Byte value, Byte closePort)                            -  Control N_RST line : assert/de
212. Int32 ar1.RfLdoBypassConfig_mult(UInt16 RadarDeviceId, UInt32 RFLDOBypassEnableAndMonIRDrop)                    -  RFLDOBypassConfig_mult API which defines enable or disable the RF LDO Bypass
213. Int32 ar1.SetExternalGpAdcConfig(UInt16 SigInputEna, UInt16 SigBufEna, UInt16 ANATest1Cfg, UInt16 ANATest2Cfg, UInt16 ANATest3Cfg, UInt16 ANATest4Cfg, UInt16 ANAMuxCfg, UInt16 VSenseCfg, UInt16 Reserved1, UInt32 Reserved2, UInt32 Reserved3, UInt32 Reserved4)                                                                                                                                                                                          -  SetExternalGpAdcConfig API Defines Enables the GPADC reads for external inputs
214. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfPllContrlVoltMonConfig(Char ReportingMode, Char APLLVctl, Char SynthVCO1VoltageControl, Char SynthVCO2VoltageControl, Char SynthVCO3VoltageControl)                                                                                                                                                        -   SetRfPllContrlVoltMonConfig API which defines that configure the information related to APLL and synthesizer voltage control signals monitoring and report the soft results from monitor
215. Int32 ar1.SetProgFiltCoeffRam31to40(Int16 FirstCoeff, Int16 SecondCoeff, Int16 ThirdCoeff, Int16 FourthCoeff, Int16 FifthCoeff, Int16 SixthCoeff, Int16 SeventhCoeff, Int16 EigthCoeff, Int16 NinethCoeff, Int16 TenthCoeff)                                                                                                                                                    -  SetProgFiltCoeffRam31to40 API Defines externally program the filter coeff RAM from 1 to 10
216. Int32 ar1.DisconnectTDA()                                                   -  Disconnect with TDA Capture card
217. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int16& ar1.RFTemperatureGet_mult(UInt16 RadarDeviceId)                                                -  RF Temperature Get API Defines to provide the device temperture sensor information dynamically 
218. Int32 ar1.DataPathConfig(UInt32 intfSel, UInt32 transferFmtPkt0, UInt32 transferFmtPkt1)                -  DataPathConfig API Defines the used to configure the device data path
219. Int32,Int32,Int32,Int32,Single& ar1.GetStaticCharData()                     -  GetStaticCharData
220. Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfPmClkLoIntAnaSignalsMonConfig(Int32 ProfileIndex, UInt32 ReportingMode)                                                    -  SetRfPmClkLoIntAnaSignalsMonConfig API which defines that configure the information related to Power management, clock generation and LO distribution circuits internal annalog signal monitoring and report the soft results from monitor
221. Int32,Int32,Int32,Int32,String& ar1.SetRfTxNBallbreakMonConfig(Char ReportingMode, Char TxBallSelMask1, Char TxBallSelMask2, Char TxBallSelMask3, Char TxBallSelMask4, Double TXReflectionCoeffMagnitudeThreshold, Double MonStartFreqConst, Char TxPowBackoff)                                                                                                                                                                                       -   SetRfTxNBallbreakMonConfig API which defines that configure the monitors of TXN transmitter balls and impedance matching and report the soft results from monitor
222. Int32 ar1.SetContStreamADCPath(String filePath)                             -  Set the ADC file path in the Continuous Streaming Tab GUI
223. Int32 ar1.DownloadMSSFw_mult(UInt32 RadarDeviceId, String path)             -  Download MSS firmware
224. Int32 ar1.DownloadMssFwOvSPI(String FwPath)                                 -  DownloadMssFwOvSPI
225. Int32 ar1.RxGainTempLutSet(Char ProfileIndex, Char Rx1GainCodeTempLessThanNeg30, Char Rx1GainCodeTempNeg30ToNeg20, Char Rx1GainCodeTempNeg20ToNeg10, Char Rx1GainCodeTempNeg10To0, Char Rx1GainCodeTemp0To10, Char Rx1GainCodeTemp10To20, Char Rx1GainCodeTemp20To30, Char Rx1GainCodeTemp30To40, Char Rx1GainCodeTemp40To50, Char Rx1GainCodeTemp50To60, Char Rx1GainCodeTemp60To70, Char Rx1GainCodeTemp70To80, Char Rx1GainCodeTemp80To90, Char Rx1GainCodeTemp90To100, Char Rx1GainCodeTemp100To110, Char Rx1GainCodeTemp110To120, Char Rx1GainCodeTemp120To130, Char Rx1GainCodeTemp130To140, Char Rx1GainCodeTempMoreThanxGainTempLutSet API used to overwrite the RX gain temperature LUT used in firmware
226. Int32,String& ar1.GetPMICBuck2()                                            -  Get the PMIC Buck2 voltage
227. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfRxNoiseMonConfig(Char ProfileIndex, Char RF1FreqBitMask, Char RF2FreqBitMask, Char RF3FreqBitMask, Char ReportingMode, Double RXNoiseFigureThreshold)                                                                                                                                                                                              -   SetRfRxNoiseMonConfig API which defines that configure the manitor of reciever noise and report the soft results from monitor
228. Int32 ar1.SetProgFiltConfig(Char ProfileIndex, Char PFCoeffStartIndex, Char ProgFilterLen, Double FreqShiftFactor)                                          -  SetProgFiltConfig API Defines externally program the filter
229. Int32 ar1.SetRFIFLoopbackConfig_mult(UInt16 RadarDeviceId, UInt16 IFLoopBackFreq, UInt16 IFLoopBackEnabled)                                   -  SetRFIFLoopbackConfig API Defines Enables/Disables IF loopback for all enabled profiles and it used to debug Rx IF chains
230. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfMixerInpPowMonConfig_mult(UInt16 RadarDeviceId, Char ReportingMode, Char ProfileIndex, Char Tx1Enable, Char Tx2Enable, Char Tx3Enable, UInt32 Thresholds)                                                                                                                                                  -  SetRfMixerInpPowMonConfig API which defines that configure related information to Rx mixer input power monitoring
231. Int32 ar1.SetTemperatureReportConfig_mult(UInt16 RadarDeviceId, UInt16 AeReportPeriod)              -  SetTemperatureReportConfig API Defines the provides the device temperature sensor information
232. String ar1.GetMSSFwVersion()                                                -  Get the version of the FW loaded (and update it in the gui)
233. Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfTx1PowMonConfig_mult(UInt16 RadarDeviceId, Char ProfileIndex, Char RF1FreqBitMask, Char RF2FreqBitMask, Char RF3FreqBitMask, Char ReportingMode, Double TxPowerAbsoluteErrorThreshold, Double TxPowerFlatnessErrorThreshold, Double TxPowerOffsetRF1, Double TxPowerOffsetRF2, Double TxPowerOffsetRF3)                                                                                                                                                                                                                                                                                          -   SetRfTx1PowMonConfig API which defines that configure the monitors of TX1 transmitter output power and report the soft results from monitor
234. Int32 ar1.AdvanceFrameConfig(UInt32 NumOfSubFrames, UInt16 ForceProfile, UInt16 SF1ForceProfileIdx, UInt16 SF1ChirpStartIdx, UInt16 SF1NumOfChirps, UInt16 SF1NumOfLoops, UInt32 SF1BurstPeriodicity, UInt16 SF1ChirpStartIdxOffset, UInt16 SF1NumOfBurst, UInt16 SF1NumOfBurstLoops, UInt32 SF1SubFramePeriodicity, UInt16 SF2ForceProfileIdx, UInt16 SF2ChirpStartIdx, UInt16 SF2NumOfChirps, UInt16 SF2NumOfLoops, UInt32 SF2BurstPeriodicity, UInt16 SF2ChirpStartIdxOffset, UInt16 SF2NumOfBurst, UInt16 SF2NumOfBurstLoops, UInt32 SF2SubFramePeriodicity, UInt16 SF3ForceProfileIdx, UInt16 SF3ChirpStartIdx, UInt16 SF3NumOfChirps, UInt16 SF3NumOfLoops, UInt32 SF3BurstPeriodicity, UInt16 SF3ChirpStartIdxOffset, UInt16 SF3NumOfBurst, UInt16 SF3NumOfBurstLoops, UInt32 SF3SubFramePeriodicity, UInt16 SF4ForceProfileIdx, UInt16 SF4ChirpStartIdx, UInt16 SF4NumOfChirps, UInt16 SF4NumOfLoops, UInt32 SF4BurstPeriodicity, UInt16 SF4ChirpStartIdxOffset, UInt16 SF4NumOfBurst, UInt16 SF4NumOfBurstLoops, UInt32 SF4SubFramePeriodicity, UInt16 NumOfFrames, UInt16 TriggerSelect, UInt32 FrameTrigDelay, Byte NumOfCloneSubFrames, UInt32 SF1TotalChirps, UInt16 SF1NumOfAdcSamples, Byte SF1NumOfChirpsInDataPacket, UInt32 SF2TotalChirps, UInt16 SF2NumOfAdcSamples, Byte SF2NumOfChirpsInDataPacket, UInt32 SF3TotalChirps, UInt16 SF3NumOfAdcSamples, Byte SF3NumOfChirpsInDataPacket, UInt32 SF4TotalChirps, UInt16 SF4NumOfAdcSamples, Byte SF4NumOfChirpsInDataPacket)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       -  AdvanceFrameConfig API Defines advanced frame configuration
235. Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfSynthFreqMonConfig_mult(UInt16 RadarDeviceId, Char ProfileIndex, Char ReportingMode, UInt16 FreqErrorThreshold, Double MonStartTime, Char MonitorMode, Char profile0, Char profile1, Byte profBitMaskLiveByte)                                                                                                                                                                                           -   SetRfSynthFreqMonConfig API which defines that configure the information related to synthesizer frequency monitoring during chirping and report the soft results from monitor
236. Int32 ar1.PowerOff()                                                        -  PowerOff
237. Int32 ar1.SetPMICClockOutConfig_mult(UInt16 RadarDeviceId, Byte PMICClockControl, Byte PMICClockSrc, Byte SrcClockDiv, Byte ModeSelect, UInt32 FreqSlope, Byte MinNDivVal, Byte MaxNDivVal, Byte ClockDitherEna, Byte Reserved)                                                                                                                                                       -  SetPMICClockOutConfig API used to to configure to set up the desired frequency pf PMIC clock that is output from device
238. Int32 ar1.SetBpmEnAdvChirpConfigLUT(UInt16 BPMValueLUTAddOff, Byte BPMValueNumParams, Byte BPMValueData1, Byte BPMValueData2, Byte BPMValueData3, Byte BPMValueData4)                                                                                             -  BPM Enable Advanced Chirp LUT configuration API
239. Int32 ar1.SubFrameStartCfgSet(UInt16 StartStopCommand, UInt16 Reserved, UInt16 Reserved2)                 -  SubFrameStartCfgSet API used for starts or stops transmission of sub frames 
240. Int32 ar1.SetProgFiltCoeffRamClear_mult(UInt16 RadarDeviceId)               -  SetProgFiltCoeffRamClear API Defines externally program the filter coeff RAM values cleared 
241. Int32,Int32,Int32,Int32,String& ar1.SetRfRxIntAnaSignalsMonConfig(Char ProfileIndex, Char ReportingMode)                                -  SetRfRxIntAnaSignalsMonConfig API which defines that configure the information related to RX internal analog signals monitoring and report the soft results from monitor
242. Int32 ar1.ConnectTDA(String ipAddr, Int32 portno, UInt32 deviceMap)         -  Setup and Connect to TDA
243. Int32 ar1.ChanNAdcConfigMSS(UInt16 RxEn, UInt16 BitsVal, UInt16 FmtVal, UInt32 IQSwap, UInt16 ChanIntrlev)                                  -  MSS API only 
244. Int32 ar1.TxGainTempLutSet_mult(UInt16 RadarDeviceId, Char ProfileIndex, Char Tx1GainCodeTempLessThanNeg30, Char Tx1GainCodeTempNeg30ToNeg20, Char Tx1GainCodeTempNeg20ToNeg10, Char Tx1GainCodeTempNeg10To0, Char Tx1GainCodeTemp0To10, Char Tx1GainCodeTemp10To20, Char Tx1GainCodeTemp20To30, Char Tx1GainCodeTemp30To40, Char Tx1GainCodeTemp40To50, Char Tx1GainCodeTemp50To60, Char Tx1GainCodeTemp60To70, Char Tx1GainCodeTemp70To80, Char Tx1GainCodeTemp80To90, Char Tx1GainCodeTemp90To100, Char Tx1GainCodeTemp100To110, Char Tx1GainCodeTemp110To120, Char Tx1GainCodeTemp120To130, Char Tx1GainCodeTemp130To140, Char Tx1GainCodeTempMoreThan140, Char Tx2GainCodeTempLessThanNeg30, Char Tx2GainCodeTempNeg30ToNeg20, Char Tx2GainCodeTempNeg20ToNeg10, Char Tx2GainCodeTempNeg10To0, Char Tx2GainCodeTemp0To10, Char Tx2GainCodeTemp10To20, Char Tx2GainCodeTemp20To30, Char Tx2GainCodeTemp30To40, Char Tx2GainCodeTemp40To50, Char Tx2GainCodeTemp50To60, Char Tx2GainCodeTemp60To70, Char Tx2GainCodeTemp70To80, Char Tx2GainCodeTemp80To90, Char Tx2GainCodeTemp90To100, Char Tx2GainCodeTemp100To110, Char Tx2GainCodeTemp110To120, Char Tx2GainCodeTemp120To130, Char Tx2GainCodeTemp130To140, Char Tx2GainCodeTempMoreThan140, Char Tx3GainCodeTempLessThanNeg30, Char Tx3GainCodeTempNeg30ToNeg20, Char Tx3GainCodeTempNeg20ToNeg10, Char Tx3GainCodeTempNeg10To0, Char Tx3GainCodeTemp0To10, Char Tx3GainCodeTemp10To20, Char Tx3GainCodeTemp20To30, Char Tx3GainCodeTemp30To40, Char Tx3GainCodeTemp40To50, Char Tx3GainCodeTemp50To60, Char Tx3GainCodeTemp60To70, Char Tx3GainCodeTemp70To80, Char Tx3GainCodeTemp80To90, Char Tx3GainCodeTemp90To100, Char Tx3GainCodeTemp100To110, Char Tx3GainCodeTemp110To120, Char Tx3GainCodeTemp120To130, Char Tx3GainCodeTemp130To140, Char Tx3GainCodeTempMoreThan140)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  -   TxGainTempLutSet API used to overwrite the TX gain temperature LUT used in firmware
245. String ar1.GetPostProcVersion()                                             -  Get Matlab PostProcVersion
246. Int32 ar1.CaptureCardConfig_StopRecord_ContinuousStreamData()               -  CaptureCardConfig_StopRecord_ContinuousStreamData API used to stop captue Data from DCA1000 device
247. Int32 ar1.SetRfAnaMonConfig(UInt32 AnaMonEnables1, UInt32 Reserved, UInt32 AnaMonEnables2)                  -   SetRfAnaMonConfig API which defines consolidated configuration of all analog monitoring
248. Int32 ar1.SOPControl_mult(UInt16 RadarDeviceId, UInt16 sopMod)              -  SOPControl_mult
249. Int32 ar1.ConfigureDetection(Double cfar_method, Double use_log_cfar, Double cfar_guard_window_size, Double cfar_window_size, Double cfar_threshold_dB, Double detect_only_local_maxima_in_range, Double detect_only_local_maxima_in_doppler, Double do_cfar_in_range, Double do_cfar_in_doppler)                                                                                                                                                                                                                         -  Configure Detection
250. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.RxGainTempLutGet_mult(UInt16 RadarDeviceId, Char ProfileIndex)                                                                                                                          -   RxGainTempLutGet API used to read the RX gain temperature LUT used by the firmware
251. Int32 ar1.SetPMICRegConfig_mult(UInt32 RadarDeviceId, Byte SlaveAddress, Byte RegAddress, Byte RegMsbData, Byte RegLsbData, UInt32 DataSize)                                                                    -  SetPMICRegConfig API is used for configure the PMIC register 
252. Int32,Int32,Int32,String& ar1.DeviceLatentFaultConfig(UInt32 TestEna1, UInt32 TestEna2, Char ReportingMode, Char TestMode, UInt16 Reserved)                                                                   -   DeviceLatentFaultConfig API which used to trigger the periodic tests in MSS
253. Int32,Int32,Int32,Int32,String& ar1.SetRfTxNBallbreakMonConfig_mult(UInt16 RadarDeviceId, Char ReportingMode, Char TxBallSelMask0, Char TxBallSelMask1, Char TxBallSelMask2, Char TxBallSelMask3, Double TXReflectionCoeffMagnitudeThreshold, Double MonStartFreqConst, Char TxPowBackoff)                                                                                                                                                                                                                  -   SetRfTxNBallbreakMonConfig API which defines that configure the monitors of TX2 transmitter balls and impedance matching and report the soft results from monitor
254. Int32 ar1.SetRfTxPhShiftDACMonConfig_mult(UInt16 RadarDeviceId, Byte ProfileIndex, Byte ReportingMode, Byte Tx0PSDACSel, Byte Tx1PSDACSel, Byte Tx2PSDACSel, Byte Tx3PSDACSel, Double TxPSDACThres, Double Tx1PSDACThres, Double Tx2PSDACThres, Double Tx3PSDACThres)                                                                                                                                                                                             -  SetRfTxPhShiftDACMonConfig API is a monitoring configuration API containing information related to TX phaseshifter DAC monitoring
255. Int32 ar1.JsonExport(String jsonFilePath_Capture, String jsonFilePath_mmwave)     -  Exports the configuration present in input mmWave configuration file and configuration corresponding to commands executed
256. Int32,Int32,Int32,String& ar1.DeviceLatentFaultConfig_mult(UInt16 RadarDeviceId, UInt32 TestEna1, UInt32 TestEna2, Char ReportingMode, Char TestMode, UInt16 Reserved)                                                                                              -   DeviceLatentFaultConfig API which used to trigger the periodic tests in MSS
257. Int32,String& ar1.GetInternalCfg(UInt32 address, UInt32 StartBit, UInt32 StopBit)         -  Get Internal Cfg of register through SPI
258. Int32 ar1.SetPMICBuck2_mult(UInt32 RadarDeviceId, Double iBuck2Voltage)     -  Set the PMIC Buck2 voltage
259. Int32 ar1.SetRfAnaMonConfig_mult(UInt16 RadarDeviceId, UInt32 AnaMonEnables1, UInt32 Reserved, UInt32 AnaMonEnables2)                                             -   SetRfAnaMonConfig API which defines consolidated configuration of all analog monitoring
260. Int32 ar1.SetProgFiltCoeffRam21to30(Int16 FirstCoeff, Int16 SecondCoeff, Int16 ThirdCoeff, Int16 FourthCoeff, Int16 FifthCoeff, Int16 SixthCoeff, Int16 SeventhCoeff, Int16 EigthCoeff, Int16 NinethCoeff, Int16 TenthCoeff)                                                                                                                                                    -  SetProgFiltCoeffRam21to30 API Defines externally program the filter coeff RAM from 1 to 10
261. Int32 ar1.ProfileConfig_mult(UInt16 RadarDeviceId, UInt16 profileId, Single startFreqConst, Single idleTimeConst, Single adcStartTimeConst, Single rampEndTime, UInt32 tx0OutPowerBackoffCode, UInt32 tx1OutPowerBackoffCode, UInt32 tx2OutPowerBackoffCode, UInt32 tx3OutPowerBackoffCode, Single tx0PhaseShifter, Single tx1PhaseShifter, Single tx2PhaseShifter, Single tx3PhaseShifter, Single freqSlopeConst, Single txStartTime, UInt16 numAdcSamples, UInt16 digOutSampleRate, UInt32 hpfCornerFreq1, UInt32 hpfCornerFreq2, Char rxGain, Char hpfInitControlSelect, Char highResTxPowerEn, Char runTimeTxPowMultiTxCalEnrofile configuration API which defines chirp profile parameters
262. Int32 ar1.SetFreqSlopeAdvChirpConfigLUT(UInt16 FreqSlopeLUTAddOff, Byte FreqSlopeNumParams, Double FreqSlopeData1, Double FreqSlopeData2, Double FreqSlopeData3, Double FreqSlopeData4)                                                                                                               -  Freq Slope Advanced Chirp LUT configuration API
263. Int32 ar1.AdvChirpDynLUTAddOffConfig_mult(UInt32 RadarDeviceId, UInt16 addrMaskEn, UInt16 lutAddressOffsetProfile, UInt16 lutAddressOffsetFreqStart, UInt16 lutAddressOffsetFreqSlope, UInt16 lutAddressOffsetIdleTime, UInt16 lutAddressOffsetAdcStartTime, UInt16 lutAddressOffsetTxEn, UInt16 lutAddressOffsetBpmVal, UInt16 lutAddressOffsetTx0PhShift, UInt16 lutAddressOffsetTx1PhShift, UInt16 lutAddressOffsetTx2PhShift, UInt16 lutAddressOffsetTx3PhShift)                                                                                                                                                                                                                                                                                                                                                                                            -  AdvChirpDynLUTAddOffConfig API used to configure LUT address offset dynamically for each chirp parameters
264. Int32,Int32,Int32,Int32,String& ar1.SetRfTx1BallbreakMonConfig(Char ReportingMode, Double TXReflectionCoeffMagnitudeThreshold, Double MonStartFreqConst, Char TxPowBackoff)                                                                                                   -   SetRfTx1BallbreakMonConfig API which defines that configure the monitors of TX1 transmitter balls and impedance matching and report the soft results from monitor
265. Int32 ar1.SetProgFiltCoeffRam11to20(Int16 FirstCoeff, Int16 SecondCoeff, Int16 ThirdCoeff, Int16 FourthCoeff, Int16 FifthCoeff, Int16 SixthCoeff, Int16 SeventhCoeff, Int16 EigthCoeff, Int16 NinethCoeff, Int16 TenthCoeff)                                                                                                                                                    -  SetProgFiltCoeffRam11to20 API Defines externally program the filter coeff RAM from 1 to 10
266. Int32,String& ar1.GetCaptureCardDllVersion_WithoutSPI()                     -  Get RF Data Capture Card dll Version
267. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfExtAnaSignalsMonConfig(Char ReportingMode, Char SigIpEnaAnalogTest1, Char SigIpEnaAnalogTest2, Char SigIpEnaAnalogTest3, Char SigIpEnaAnalogTest4, Char SigIpEnaAnalogMux, Char SigIpEnaAnalogVSense, Char SigBufEnaAnalogTest1, Char SigBufEnaAnalogTest2, Char SigBufEnaAnalogTest3, Char SigBufEnaAnalogTest4, Char SigBufEnaAnalogMux, Double SigSettlingTimeAnalogTest1, Double SigSettlingTimeAnalogTest2, Double SigSettlingTimeAnalogTest3, Double SigSettlingTimeAnalogTest4, Double SigSettlingTimeAnalogMux, Double SigSettlingTimeAnalogVSense, Double SigMinThresholdAnalogTest1, Double SigMinThresholdAnalogTest2, Double SigMinThresholdAnalogTest3, Double SigMinThresholdAnalogTest4, Double SigMinThresholdAnalogMux, Double SigMinThresholdAnalogVSense, Double SigMaxThresholdAnalogTest1, Double SigMaxThresholdAnalogTest2, Double SigMaxThresholdAnalogTest3, Double SigMaxThresholdAnalogTest4, Double SigMaxThresholdAnalogMux, Double SigMaxThresholdAnalogVSenseetRfExtAnaSignalsMonConfig API which defines that configure the information related to external DC signals monitoring and report the soft results from monitor
268. Int32 ar1.RfLdoBypassConfig(UInt32 RFLDOBypassEnableAndMonIRDrop)           -  RFLDOBypassConfig API which defines enable or disable the RF LDO Bypass
269. Int32 ar1.SetDynamicPowerSaveMode(UInt16 BlockCfgTX, UInt16 BlockCfgRX, UInt16 BlockCfgLODist)                      -  SetDynamicPowerSaveMode configuration API which defines enable Dynamic Power Save Mode
270. Int32 ar1.SetRfTx2PhShiftMonConfig_mult(UInt16 RadarDeviceId, Byte ProfileIndex, Byte ReportingMode, Double MonChirpSlope, Byte PhaseEn, Byte RxChannel, Double PhShifterIncVal1, Double PhShifterIncVal2, Double PhShifterIncVal3, Double PhShifterIncVal4, Double PhShifterMonVal1, Double PhShifterMonVal2, Double PhShifterMonVal3, Double PhShifterMonVal4, Double TxPhaseErrorThreshold, Double TxAmplitudeErrorThreshold)                                                                                                                                                                                                                                                                                                                                                        -  SetRfTx2PhShiftMonConfig API is a monitoring configuration API containing information related to TX2 TX loop back based phase shifter monitoring
271. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.TxGainTempLutGet_mult(UInt16 RadarDeviceId, Char ProfileIndex)                                                                                                                                                                                                                                                                                                                                                              -   TxGainTempLutGet API used to read the TX gain temperature LUT used by the firmware
272. Int32 ar1.rlRfPhShifterCalibDataStore_mult(UInt16 RadarDeviceId, UInt16 Reserved0, UInt16 Reserved1, UInt16 Reserved2, UInt16 Reserved3, String PhaseShiterCalibStoreFilePath)                                                                                                      -  rlRfPhShifterCalibDataStore API used to read the phase shifter calibration data from device
273. Int32 ar1.EnableTestSource(UInt16 mode)                                     -  EnableTestSource
274. Int32,Int32,Int32,Int32,String& ar1.SetRfTx0BallbreakMonConfig_mult(UInt16 RadarDeviceId, Char ReportingMode, Double TXReflectionCoeffMagnitudeThreshold, Double MonStartFreqConst, Char TxPowBackoff)                                                                                                                              -   SetRfTx0BallbreakMonConfig API which defines that configure the monitors of TX0 transmitter balls and impedance matching and report the soft results from monitor
275. Int32,String& ar1.DevicePeriodicTestsConfig_mult(UInt16 RadarDeviceId, UInt32 Periodicity, UInt32 TestEna, Char ReportingMode, UInt16 Reserved)                                                                       -   DevicePeriodicTestsConfig API which used to trigger the periodic tests in MSS
276. Int32 ar1.SetProfileAdvChirpConfigLUT(UInt16 profileLUTAddOff, Byte profileNumParams, Byte profileData1, Byte profileData2, Byte profileData3, Byte profileData4)                                                                                         -  Profile Advanced Chirp LUT configuration API
277. Int32,Int32,Int32,Int32,String& ar1.SetRfTx1BallbreakMonConfig_mult(UInt16 RadarDeviceId, Char ReportingMode, Double TXReflectionCoeffMagnitudeThreshold, Double MonStartFreqConst, Char TxPowBackoff)                                                                                                                              -   SetRfTx1BallbreakMonConfig API which defines that configure the monitors of TX1 transmitter balls and impedance matching and report the soft results from monitor
278. Int32 ar1.rlRfPhShifterCalibDataRestore_mult(UInt16 RadarDeviceId, UInt16 Reserved0, UInt16 Reserved1, UInt16 Reserved2, UInt16 Reserved3, String PhaseShiterCalibRestoreFilePath)                                                                                                          -  rlRfPhShifterCalibDataRestore API used to restore the phase shifter calibration data for Tx channles
279. Int32 ar1.SavePostProcPicture(String ADCFilename)                           -  Save  PostProcPicture
280. Int32 ar1.rlRfPhShifterCalibDataStore(UInt16 Reserved0, UInt16 Reserved1, UInt16 Reserved2, UInt16 Reserved3, String PhaseShiterCalibStoreFilePath)                                                                           -  rlRfPhShifterCalibDataStore API used to read the phase shifter calibration data from device
281. Int32 ar1.SetAdvBpmPatternConfig(Byte BPMPatternIndex, Byte Reserved, UInt16 ResetOption, UInt16 Reserved1, UInt16 Reserved2, String Tx0BPMpattern0, UInt32 Tx0BPMpattern1, UInt32 Tx0BPMpattern2, UInt32 Tx0BPMpattern3, UInt32 Tx0BPMpattern4, UInt32 Tx0BPMpattern5, UInt32 Tx0BPMpattern6, UInt32 Tx0BPMpattern7, UInt32 Tx0BPMpattern8, UInt32 Tx0BPMpattern9, UInt32 Tx0BPMpattern10, UInt32 Tx0BPMpattern11, UInt32 Tx0BPMpattern12, UInt32 Tx0BPMpattern13, UInt32 Tx0BPMpattern14, UInt32 Tx0BPMpattern15, UInt32 Tx1BPMpattern0, UInt32 Tx1BPMpattern1, UInt32 Tx1BPMpattern2, UInt32 Tx1BPMpattern3, UInt32 Tx1BPMpattern4, UInt32 Tx1BPMpattern5, UInt32 Tx1BPMpattern6, UInt32 Tx1BPMpattern7, UInt32 Tx1BPMpattern8, UInt32 Tx1BPMpattern9, UInt32 Tx1BPMpattern10, UInt32 Tx1BPMpattern11, UInt32 Tx1BPMpattern12, UInt32 Tx1BPMpattern13, UInt32 Tx1BPMpattern14, UInt32 Tx1BPMpattern15, UInt32 Tx2BPMpattern0, UInt32 Tx2BPMpattern1, UInt32 Tx2BPMpattern2, UInt32 Tx2BPMpattern3, UInt32 Tx2BPMpattern4, UInt32 Tx2BPMpattern5, UInt32 Tx2BPMpattern6, UInt32 Tx2BPMpattern7, UInt32 Tx2BPMpattern8, UInt32 Tx2BPMpattern9, UInt32 Tx2BPMpattern10, UInt32 Tx2BPMpattern11, UInt32 Tx2BPMpattern12, UInt32 Tx2BPMpattern13, UInt32 Tx2BPMpattern14, UInt32 Tx2BPMpatternetAdvBpmPatternConfig API Defines advance BPM pattern configuration for each of the TXs Channels.
282. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfDualClkCompMonConfig_mult(UInt16 RadarDeviceId, Char ReportingMode, Char ClockPair0, Char ClockPair1, Char ClockPair2, Char ClockPair3, Char ClockPair4, Char ClockPair5, Char FRC_200M)                                                                                                                                                                                             -   SetRfDualClkCompMonConfig API which defines that configure the information related to DCC based clock  frequency monitoring and report the soft results from monitor
283. Int32 ar1.Connect(UInt32 com_port, UInt32 baud_rate, UInt32 timeout)        -  Connect to the board
284. Int32 ar1.SetPMICBuck3_mult(UInt32 RadarDeviceId, Double iBuck3Voltage)     -  Set the PMIC Buck3 voltage
285. Int32,Int32,Int32,Int32,Int32,String& ar1.PowerOn(UInt16 crcType, UInt16 ackTimeout, Char trasportType, UInt32 portNum)                                               -  PowerOn
286. Int32 ar1.ReadBlock(UInt32 abs_addr, UInt32 num_of_dwords, String filename, Boolean append)                   -  Read a block of registers
287. Int32,String& ar1.DevicePeriodicTestsConfig(UInt32 Periodicity, UInt32 TestEna, Char ReportingMode, UInt16 Reserved)                                            -   DevicePeriodicTestsConfig API which used to trigger the periodic tests in MSS
288. Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfTx1PowMonConfig(Char ProfileIndex, Char RF1FreqBitMask, Char RF2FreqBitMask, Char RF3FreqBitMask, Char ReportingMode, Double TxPowerAbsoluteErrorThreshold, Double TxPowerFlatnessErrorThreshold, Double TxPowerOffsetRF1, Double TxPowerOffsetRF2, Double TxPowerOffsetRF3)                                                                                                                                                                                                                                                               -   SetRfTx1PowMonConfig API which defines that configure the monitors of TX1 transmitter output power and report the soft results from monitor
289. Int32 ar1.SetTestSource_mult(UInt16 RadarDeviceId, Single obj1PosX, Single obj1PosY, Single obj1PosZ, Single obj1VelX, Single obj1VelY, Single obj1VelZ, Single obj1BMinX, Single obj1BMinY, Single obj1BMinZ, Single obj1BMaxX, Single obj1BMaxY, Single obj1BMaxZ, Single obj1Sig, Single obj2PosX, Single obj2PosY, Single obj2PosZ, Single obj2VelX, Single obj2VelY, Single obj2VelZ, Single obj2BMinX, Single obj2BMinY, Single obj2BMinZ, Single obj2BMaxX, Single obj2BMaxY, Single obj2BMaxZ, Single obj2Sig, Single obj1AntPosRx1X, Single obj1AntPosRx1Z, Single obj1AntPosRx2X, Single obj1AntPosRx2Z, Single obj1AntPosRx3X, Single obj1AntPosRx3Z, Single obj1AntPosRx4X, Single obj1AntPosRx4Z, Single obj1AntPosTx1X, Single obj1AntPosTx1Z, Single obj1AntPosTx2X, Single obj1AntPosTx2Z, Single obj1AntPosTx3X, Single obj1AntPosTx3Z, UInt16 disableDitheret Test Source API Defines test source emulates recieved reflections from pair of objects at different positions with different velocities and their signal level strengths
290. Int32 ar1.ConfigureSetup()                                                  -  Configures the Capture Card and Setup fields
291. Int32 ar1.TDAFolderDeleteAll(String foldername, String com_port, Int32 baudrate)        -  Delete a set of folders from TDA file system at /mnt/ssd directory
292. Int32,MWArray& ar1.ReturnListOfDetectedObjects(String filename)             -  ReturnListOfDetectedObjects
293. Int32 ar1.DownloadBssFwOvSPI_mult(UInt16 RadarDeviceId, String FwPath)      -  Download Bss Firmware Over SPI on cascade device
294. Int32 ar1.SetInterChirpBlockControlsConfig_mult(UInt16 RadarDeviceId, Double Rx02RFTurnOffTime, Double Rx13RFTurnOffTime, Double Rx02BBTurnOffTime, Double Rx13BBTurnOffTime, Double Rx02RFPreEnableTime, Double Rx24RFPreEnableTime, Double Rx02BBPreEnableTime, Double Rx13BBPreEnableTime, Double Rx02RFTurnOnTime, Double Rx13RFTurnOnTime, Double Rx02BBTurnOnTime, Double Rx13BBTurnOnTime, Double RxLOChainTurnOffTime, Double TxLOChainTurnOffTime, Double RxLOChainTurnOnTime, Double TxLOChainTurnOnTime, UInt32 Reserved, UInt32 Reserved2)                                                                                                                                                                                                                                                                                                                                                                                                                                                                              -  SetInterChirpBlockControlsConfig API used to trigger the chirp config from software to hardware
295. Int32 ar1.SetMSSDeviceConfig_mult(UInt16 RadarDeviceId, Byte LoggerEn, Byte AsyncEventCRCConfig)                        -   SetMSSDeviceConfig API which configures the direction of async event from MSS
296. Int32 ar1.ConfigureRFDCCard_EEPROM(String SystemSourceIPAddress, String FPGADestIPAddress, String FPGAMACAddress, UInt32 ConfigPort, UInt32 RecordPort)                                                                               -  ConfigureRFDCCard_EEPROM API used toconfigure the RF data capture card of EEPROM
297. Int32 ar1.SetRfTx0PhShiftMonConfig(Byte ProfileIndex, Byte ReportingMode, Double MonChirpSlope, Byte PhaseEn, Byte RxChannel, Double PhShifterIncVal1, Double PhShifterIncVal2, Double PhShifterIncVal3, Double PhShifterIncVal4, Double PhShifterMonVal1, Double PhShifterMonVal2, Double PhShifterMonVal3, Double PhShifterMonVal4, Double TxPhaseErrorThreshold, Double TxAmplitudeErrorThreshold)                                                                                                                                                                                                                                                                                                                             -  SetRfTx0PhShiftMonConfig API is a monitoring configuration API containing information related to TX0 TX loop back based phase shifter monitoring
298. Int32 ar1.SetRfRxSigImgMonConfig_mult(UInt16 RadarDeviceId, Char ProfileIndex, Int16 SigImGMonPriTimeSliceNumSamples, Char SigImGMonNumSlices)                                                                      -   SetRfRxSigImgMonConfig API which defines containing information related to signal and image band energy
299. Int32,MWArray& ar1.ReturnStrongestDetectedObject(String filename)           -  ReturnStrongestDetectedObject
300. Int32 ar1.SetProgFiltCoeffRam41to50(Int16 FirstCoeff, Int16 SecondCoeff, Int16 ThirdCoeff, Int16 FourthCoeff, Int16 FifthCoeff, Int16 SixthCoeff, Int16 SeventhCoeff, Int16 EigthCoeff, Int16 NinethCoeff, Int16 TenthCoeff)                                                                                                                                                    -  SetProgFiltCoeffRam41to50 API Defines externally program the filter coeff RAM from 1 to 10
301. Int32,Int32,Int32,Int32,String& ar1.RunTimeCalibConfTrig_mult(UInt16 RadarDeviceId, UInt32 OneTimeCalibLODist, UInt32 OneTimeCalibTXPower, UInt32 OneTimeCalibRXGain, UInt32 OneTimeCalibPDCal, UInt32 OneTimeCalibTxPhShift, UInt32 PeriodicCalibLODist, UInt32 PeriodicCalibTXPower, UInt32 PeriodicCalibRXGain, UInt32 PeriodicCalibPDCal, UInt32 PeriodicCalibTxPhShift, UInt32 CalibPeriodicity, Char CalReport, Char TxPowerCalMode, Char TXTempIdxOverrideEn, Char RXTempIdxOverrideEn, Char LODISTTempIdxOverrideEn, Char TXPhaseTempIdxOverrideEn, Char TXCalTempIdx, Char RXCalTempIdx, Char LODISTCalTempIdx, Char TXPhaseTempIdxunTimeCalibConfTrig API which defines calibration and monitoring RF Run Time configuration
302. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfExtAnaSignalsMonConfig_mult(UInt16 RadarDeviceId, Char ReportingMode, Char SigIpEnaAnalogTest1, Char SigIpEnaAnalogTest2, Char SigIpEnaAnalogTest3, Char SigIpEnaAnalogTest4, Char SigIpEnaAnalogMux, Char SigIpEnaAnalogVSense, Char SigBufEnaAnalogTest1, Char SigBufEnaAnalogTest2, Char SigBufEnaAnalogTest3, Char SigBufEnaAnalogTest4, Char SigBufEnaAnalogMux, Double SigSettlingTimeAnalogTest1, Double SigSettlingTimeAnalogTest2, Double SigSettlingTimeAnalogTest3, Double SigSettlingTimeAnalogTest4, Double SigSettlingTimeAnalogMux, Double SigSettlingTimeAnalogVSense, Double SigMinThresholdAnalogTest1, Double SigMinThresholdAnalogTest2, Double SigMinThresholdAnalogTest3, Double SigMinThresholdAnalogTest4, Double SigMinThresholdAnalogMux, Double SigMinThresholdAnalogVSense, Double SigMaxThresholdAnalogTest1, Double SigMaxThresholdAnalogTest2, Double SigMaxThresholdAnalogTest3, Double SigMaxThresholdAnalogTest4, Double SigMaxThresholdAnalogMux, Double SigMaxThresholdAnalogVSenseetRfExtAnaSignalsMonConfig API which defines that configure the information related to external DC signals monitoring and report the soft results from monitor
303. Int32 ar1.SetPerChirpPhaseShifterConfig(UInt16 ChirpStartIndex, UInt16 ChirpEndIndex, UInt16 Tx0PhaseShifter, UInt16 Tx1PhaseShifter, UInt16 Tx2PhaseShifter, UInt16 Tx3PhaseShifter)                                                                                                             -  SetPerChirpPhaseShifterConfig API Defines static phase configurations per chirp in each of the TXs Channels.
304. Int32 ar1.SetInterChirpBlockControlsConfig(Double Rx02RFTurnOffTime, Double Rx13RFTurnOffTime, Double Rx02BBTurnOffTime, Double Rx13BBTurnOffTime, Double Rx02RFPreEnableTime, Double Rx24RFPreEnableTime, Double Rx02BBPreEnableTime, Double Rx13BBPreEnableTime, Double Rx02RFTurnOnTime, Double Rx13RFTurnOnTime, Double Rx02BBTurnOnTime, Double Rx13BBTurnOnTime, Double RxLOChainTurnOffTime, Double TxLOChainTurnOffTime, Double RxLOChainTurnOnTime, Double TxLOChainTurnOnTime, UInt32 Reserved, UInt32 Reserved2)                                                                                                                                                                                                                                                                                                                                                                                                                                                   -  SetInterChirpBlockControlsConfig API used to trigger the chirp config from software to hardware
305. Int32 ar1.SetRfTxNPhShiftMonConfig(Byte ProfileIndex, Byte ReportingMode, Double MonChirpSlope, Byte PhaseEn, Byte RxChannel, Char TxMonPhSelMask1, Char TxMonPhSelMask2, Char TxMonPhSelMask3, Char TxMonPhSelMask4, Double PhShifterIncVal1, Double PhShifterIncVal2, Double PhShifterIncVal3, Double PhShifterIncVal4, Double PhShifterMonVal1, Double PhShifterMonVal2, Double PhShifterMonVal3, Double PhShifterMonVal4, Double TxPhaseErrorThreshold, Double TxAmplitudeErrorThreshold)                                                                                                                                                                                                                                                                                                                                                                                                                     -  SetRfTxNPhShiftMonConfig API is a monitoring configuration API containing information related to TX2 TX loop back based phase shifter monitoring
306. Int32 ar1.AdditionalConfigurationForAnalysisTool(UInt32 SamplesStartindex, UInt32 NumberOfSamplesPerFFT, UInt32 ChirpsStartIndex, UInt32 NumOfChiprsPerFrame, UInt32 FrameStartIndex, UInt32 NumFrames)                                                                                                                               -  Additional Configuration For Analysis Tool
307. Int32 ar1.LPModConfig_mult(UInt16 RadarDeviceId, Int32 AnaChan, Int32 LpAdcMod)       -  LP Mod Config API which defines both Configure the ADC Mode and analog filter channel format
308. Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfTx2PowMonConfig_mult(UInt16 RadarDeviceId, Char ProfileIndex, Char RF1FreqBitMask, Char RF2FreqBitMask, Char RF3FreqBitMask, Char ReportingMode, Double TxPowerAbsoluteErrorThreshold, Double TxPowerFlatnessErrorThreshold, Double TxPowerOffsetRF1, Double TxPowerOffsetRF2, Double TxPowerOffsetRF3)                                                                                                                                                                                                                                                                                          -   SetRfTx2PowMonConfig API which defines that configure the monitors of TX2 transmitter output power and report the soft results from monitor
309. Int32,Int32,Int32,Int32,UInt32& ar1.RfInit()                                -  RfInit API defines the intialization of RF anlog and digital base band sections
310. Int32 ar1.SetPMICBuck0_mult(UInt32 RadarDeviceId, Double iBuck0Voltage)     -  Set the PMIC Buck0 voltage
311. Int32,UInt32& ar1.GetNumberOfRadarDevicesDetected()                         -  GetNumberOfRadarDevicesDetected API defines the number of Radar devices detected
312. Int32 ar1.BasicConfigurationForAnalysisTool(UInt32 NumberOfSamplesPerFFT, UInt32 FFTSize, UInt32 NumNonCohAverages, UInt32 WindowSelect, UInt32 RemoveDc, UInt32 EnableTriggeredCapture)                                                                                                                -  This functions allows the configuration of a set of parameters for the analysis tool and should be called only after the device has been placed in 'continous streaming'mode. This function also programs the HSDCPro to collect the necessary number of samples based on the NumberOfSamplesPerFFT and NumNonCohAverages
313. Int32 ar1.LbBurstCfgSet(Byte LoopBackSelect, Byte BaseProfileIndex, Byte BurstIndex, Byte Reserved, Double FreqConst, Single SlopeConst, Byte Reserved2, UInt32 TxBackOff, UInt16 RxGain, Byte TxEnable, Byte Reserved3, UInt16 BPMConfig, UInt16 DigitalCorrectionDisable, Byte IFLoopBackFreq, Byte IFLoopBackMagnitude, Byte CommonLoopBackGain, Byte AdvLOLoopBackGain, UInt32 AdvLOLoopBackFreq, Byte Reserved4, UInt32 AdvPALoopBackFreq, Byte AdvPALoopBackGain)                                                                                                                                                                                                                                                                                                                                                                                               -  LbBurstCfgSet API used for introduce loop back chirps within the on
314. Int32 ar1.SetRFIFLoopbackConfig(UInt16 IFLoopBackFreq, UInt16 IFLoopBackEnabled)        -  SetRFIFLoopbackConfig API Defines Enables/Disables IF loopback for all enabled profiles and it used to debug Rx IF chains
315. Int32,Int32,String& ar1.GetMSSFwVersionAPI()                                -  Get the version of both MSS FW and patch over SPI
316. Int32 ar1.DownloadMssFwOvSPI_mult(UInt16 RadarDeviceId, String FwPath)      -  DownloadMssFwOvSPI
317. Int32,Int32,Int32,Double& ar1.MeasureSecondHarmonicCharacsteristics(String ADCfilename, Double fund_freq_hz, Double Integration_bw_hz, UInt32 Rxchain, UInt32 I_or_Q)                                                                                             -  Returns the power(in dBFS), the frequency(in Hz), and the phase(in radians) of the second harmonic peak located in the fourier specturm. the third harmonic is sought at fund_freq_hz x2. Once the harmonic is found , its energy is computed by integrating_bw_hz around the peak
318. Int32,String& ar1.GetPMICBuck3()                                            -  Get the PMIC Buck3 voltage
319. Int32 ar1.AdvanceDevFrameConfig_mult(UInt16 RadarDeviceId, UInt32 NumOfSubFrames, UInt16 SF1NumOfChirps, UInt16 SF1NumOfAdcSamplesPerDataPkt, Byte SF1NumOfChirpsInDataPacket, UInt16 SF2NumOfChirps, UInt16 SF2NumOfAdcSamplesPerDataPkt, Byte SF2NumOfChirpsInDataPacket, UInt16 SF3NumOfChirps, UInt16 SF3NumOfAdcSamplesPerDataPkt, Byte SF3NumOfChirpsInDataPacket, UInt16 SF4NumOfChirps, UInt16 SF4NumOfAdcSamplesPerDataPkt, Byte SF4NumOfChirpsInDataPacket)                                                                                                                                                                                                                                                                                                                                                                                             -  AdvanceDevFrameConfig API Defines advance dev frame configuration
320. Int32 ar1.BpmConfig_mult(UInt16 RadarDeviceId, UInt16 bpmChirpStartIndex, UInt16 bpmChirpEndIndex, UInt16 tx0Off, UInt16 tx0On, UInt16 tx1Off, UInt16 tx1On, UInt16 tx2Off, UInt16 tx2On, UInt16 tx3Off, UInt16 tx3On)                                                                                                                                              -  Bpm Configuration API Defines static configurations related to BPM(Binary Phase Modulation) feature in each of the TXs Channels.
321. Int32 ar1.SetRfRxIfSatMonConfig(Byte ProfileIndex, Byte SatMonSelect, Byte Reserved1, Byte Reserved2, Double SatMonPrimaryTimeSliceDuration, Int16 SatMonNumSlices, Byte SatMonRxChannelMask, Byte Reserved3, Byte Reserved4, Byte Reserved5, UInt32 Reserved6, UInt32 Reserved7)                                                                                                                                                                                                         -   SetRfRxIfSatMonConfig API which defines containing information related to RX saturation detector monitoring 
322. Int32,String& ar1.ReadAdvChirpConfigLUT(UInt16 lutAddressOffset)            -  Read Advanced Chirp LUT configuration API
323. Int32 ar1.CaptureCardConfig_Mode(UInt32 eLogMode, UInt32 eLvdsMode, UInt32 eDataXferMode, UInt32 eDataCaptureMode, UInt32 eDataFormatMode, Byte u8Timer)                                                                                -  ConfigureRFDCCardMode API used to configured the ethernet mode
324. Int32 ar1.SetRFDeviceConfig(UInt32 RFAEDirection, Byte AEControl, Byte BSSAnaControl, Byte BSSDigitalControl, Byte AsyncEventCRCConfig, Byte Reserved2, UInt16 Reserved3)                                                                                                 -   SetRFDeviceConfig API which configures the direction of async event from BSS
325. Int32 ar1.SetAnalogFaultInjectionConfig(Byte Reserved, Byte RxGainDrop, Byte RxPhaseInv, Byte RxHighNoise, Byte RxIFStageFault, Byte RxLOAmpFault, Byte TxLOAmpFault, Byte TxGainDrop, Byte TxPhaseInv, Byte SynthFault, Byte SupplyLDOFault, Byte MiscFault, Byte MiscThresholdFault, Byte TxPsDacFault, UInt16 Reserved3, UInt32 Reserved4)                                                                                                                                                                                                                                                                     -  SetAnalogFaultInjectionConfig API used to inject the faults in the analog circuits to test the corresponding monitors
326. Int32 ar1.CaptureCardConfig_EthInit_WithoutSPI(String SystemSourceIPAddress, String FPGADestIPAddress, String FPGAMACAddress, UInt32 ConfigPort, UInt32 RecordPort)                                                                                           -  CaptureCardConfig_EthInit_WithoutSPI API used to ethernet initialization
327. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfRxNoiseMonConfig_mult(UInt16 RadarDeviceId, Char ProfileIndex, Char RF1FreqBitMask, Char RF2FreqBitMask, Char RF3FreqBitMask, Char ReportingMode, Double RXNoiseFigureThreshold)                                                                                                                                                                                                                         -   SetRfRxNoiseMonConfig API which defines that configure the manitor of reciever noise and report the soft results from monitor
328. Int32 ar1.SetPMICBuck1_mult(UInt32 RadarDeviceId, Double iBuck1Voltage)     -  Set the PMIC Buck1 voltage
329. Int32,String& ar1.GetPMICBuck0()                                            -  Get the PMIC Buck0 voltage
330. Int32 ar1.DebugSignal(UInt16 DbgMode)                                       -  DebugSignal
331. Int32 ar1.CaptureContStreamADCData(String ADCFileName, UInt32 ADCNumberOfSamples)         -  CaptureContStreamADCData API defines Capture the ADC Data from continuous streaming
332. Int32 ar1.SetRFLOLoopbackConfig(UInt32 LOLoopBackFreq, Char LOLoopBackEnabled, Byte CommonLoopBackGain, Byte LOLoopBackGain)                                                    -  SetRFLOLoopbackConfig API Defines Enables/Disables LO loopback for all enabled profiles and it used to debug both Tx and Rx chains are working correctly.
333. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.MeasureTheTxPowerConfig(Char NumberOfAccumulations, Char NumberOfSamples)                                                                                                             -  MeasureTheTxPower API used to measure the TX output power using the onchip peak detectors
334. Int32 ar1.TxGainTempLutSet(Char ProfileIndex, Char Tx1GainCodeTempLessThanNeg30, Char Tx1GainCodeTempNeg30ToNeg20, Char Tx1GainCodeTempNeg20ToNeg10, Char Tx1GainCodeTempNeg10To0, Char Tx1GainCodeTemp0To10, Char Tx1GainCodeTemp10To20, Char Tx1GainCodeTemp20To30, Char Tx1GainCodeTemp30To40, Char Tx1GainCodeTemp40To50, Char Tx1GainCodeTemp50To60, Char Tx1GainCodeTemp60To70, Char Tx1GainCodeTemp70To80, Char Tx1GainCodeTemp80To90, Char Tx1GainCodeTemp90To100, Char Tx1GainCodeTemp100To110, Char Tx1GainCodeTemp110To120, Char Tx1GainCodeTemp120To130, Char Tx1GainCodeTemp130To140, Char Tx1GainCodeTempMoreThan140, Char Tx2GainCodeTempLessThanNeg30, Char Tx2GainCodeTempNeg30ToNeg20, Char Tx2GainCodeTempNeg20ToNeg10, Char Tx2GainCodeTempNeg10To0, Char Tx2GainCodeTemp0To10, Char Tx2GainCodeTemp10To20, Char Tx2GainCodeTemp20To30, Char Tx2GainCodeTemp30To40, Char Tx2GainCodeTemp40To50, Char Tx2GainCodeTemp50To60, Char Tx2GainCodeTemp60To70, Char Tx2GainCodeTemp70To80, Char Tx2GainCodeTemp80To90, Char Tx2GainCodeTemp90To100, Char Tx2GainCodeTemp100To110, Char Tx2GainCodeTemp110To120, Char Tx2GainCodeTemp120To130, Char Tx2GainCodeTemp130To140, Char Tx2GainCodeTempMoreThan140, Char Tx3GainCodeTempLessThanNeg30, Char Tx3GainCodeTempNeg30ToNeg20, Char Tx3GainCodeTempNeg20ToNeg10, Char Tx3GainCodeTempNeg10To0, Char Tx3GainCodeTemp0To10, Char Tx3GainCodeTemp10To20, Char Tx3GainCodeTemp20To30, Char Tx3GainCodeTemp30To40, Char Tx3GainCodeTemp40To50, Char Tx3GainCodeTemp50To60, Char Tx3GainCodeTemp60To70, Char Tx3GainCodeTemp70To80, Char Tx3GainCodeTemp80To90, Char Tx3GainCodeTemp90To100, Char Tx3GainCodeTemp100To110, Char Tx3GainCodeTemp110To120, Char Tx3GainCodeTemp120To130, Char Tx3GainCodeTemp130To140, Char Tx3GainCodeTempMoreThanxGainTempLutSet API used to overwrite the TX gain temperature LUT used in firmware
335. Int32 ar1.SetProgFiltConfig_mult(UInt16 RadarDeviceId, Char ProfileIndex, Char PFCoeffStartIndex, Char ProgFilterLen, Double FreqShiftFactor)                                                                     -  SetProgFiltConfig API Defines externally program the filter
336. Int32 ar1.SetTestPatternConfig(Byte TestPatternGenCtl, Byte TestPatternGenTiming, UInt16 TestPatternPktSize, UInt32 NumTestPatternPkts, UInt16 TestPatternRx0ICfg1, UInt16 TestPatternRx0ICfg2, UInt16 TestPatternRx0QCfg1, UInt16 TestPatternRx0QCfg2, UInt16 TestPatternRx1ICfg1, UInt16 TestPatternRx1ICfg2, UInt16 TestPatternRx1QCfg1, UInt16 TestPatternRx1QCfg2, UInt16 TestPatternRx2ICfg1, UInt16 TestPatternRx2ICfg2, UInt16 TestPatternRx2QCfg1, UInt16 TestPatternRx2QCfg2, UInt16 TestPatternRx3ICfg1, UInt16 TestPatternRx3ICfg2, UInt16 TestPatternRx3QCfg1, UInt16 TestPatternRx3QCfg2, UInt32 Reserved)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                -  SetTestPatternConfig API used configurations to set up the test pattern to be generated and transferred over the selected high speed interface(LVDS/CSI2)
337. Int32 ar1.CaptureImport(String capturePath)                                 -  Imports Capture Setup JSON Configuration file
338. Int32 ar1.CustomDownloadMSSFw(String path)                                  -  Custom Download MSS firmware
339. Int32 ar1.SetPMICBuck1(Double iBuck1Voltage)                                -  Set the PMIC Buck1 voltage
340. Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfTx1IntAnaSignalsMonConfig(Char ProfileIndex, Char ReportingMode)                                             -  SetRfTx1IntAnaSignalsMonConfig API which defines that configure the information related to TX1 internal analog signals monitoring and report the soft results from monitor
341. Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfTx1IntAnaSignalsMonConfig_mult(UInt16 RadarDeviceId, Char ProfileIndex, Char ReportingMode)                                                                        -  SetRfTx1IntAnaSignalsMonConfig API which defines that configure the information related to TX1 internal analog signals monitoring and report the soft results from monitor
342. Int32 ar1.SetRFPALoopbackConfig(UInt32 PALoopBackFreq, Char PALoopBackEnabled, Byte CommonBufGainIndex, Byte PALbBufGainSel)                                                    -  SetRFPALoopbackConfig API Defines Enables/Disables PA loopback for all enabled profiles and it used to debug both Tx and Rx chains are working correctly.
343. Int32,String& ar1.Calling_GetFW_Version()                                   -  Get the version of the FW loaded
344. Int32 ar1.SetProgFiltCoeffRam91to100(Int16 FirstCoeff, Int16 SecondCoeff, Int16 ThirdCoeff, Int16 FourthCoeff, Int16 FifthCoeff, Int16 SixthCoeff, Int16 SeventhCoeff, Int16 EigthCoeff, Int16 NinethCoeff, Int16 TenthCoeff)                                                                                                                                                     -  SetProgFiltCoeffRam91to100 API Defines externally program the filter coeff RAM from 1 to 10
345. Int32,String& ar1.GetPMICBuck1()                                            -  Get the PMIC Buck1 voltage
346. Int32 ar1.StartMatlabPostProc(String filename)                              -  StartMatlabPostProc
347. Int32 ar1.SetRfInterRxGainPhFreqConfig(Char ProfileIndex, Char RxGainCompEn, Char RxPhaseCompEn, Char RxDelayCompEn, Char RxFreqCompEn, Char TxFreqCompEn, Double Rx0DigitalGain, Double Rx1DigitalGain, Double Rx2DigitalGain, Double Rx3DigitalGain, Double Rx0DigitalPhaseShift, Double Rx1DigitalPhaseShift, Double Rx2DigitalPhaseShift, Double Rx3DigitalPhaseShift, Double Rx0DigitalDelay, Double Rx1DigitalDelay, Double Rx2DigitalDelay, Double Rx3DigitalDelay, Double Rx0DigitalFreqShift, Double Rx1DigitalFreqShift, Double Rx2DigitalFreqShift, Double Rx3DigitalFreqShift, Double TX0DigitalFreqShift, Double TX1DigitalFreqShift, Double TX2DigitalFreqShift, Double TX3DigitalFreqShiftetRfInterRxGainPhFreqConfig API which used to induce diffwrent gain or phase or frequency offsets on the different RXs, for inter
348. Int32 ar1.SetApllSynthBWCtlConfig_mult(UInt16 RadarDeviceId, Char SynthICPTrim, Char SynthRZTrim, Char ApllICPTrim, Char ApllRZTrimLPF, Char ApllRZTrimVCO, Char SynthICPTrimVCO2, Char SynthRZTrimVCO2)                                                                                                                                -   SetApllSynthBWCtlConfig_mult API controls the bandwidth of the APLL and the Synthesizer
349. Int32 ar1.JsonLoad(Int32 devId)                                             -  Populate Device configuration from JSON file to various tabs for device specified in argument
350. Int32 ar1.SetProgFiltCoeffRam71to80_mult(UInt16 RadarDeviceId, Int16 FirstCoeff, Int16 SecondCoeff, Int16 ThirdCoeff, Int16 FourthCoeff, Int16 FifthCoeff, Int16 SixthCoeff, Int16 SeventhCoeff, Int16 EigthCoeff, Int16 NinethCoeff, Int16 TenthCoeff)                                                                                                                                                                               -  SetProgFiltCoeffRam71to80 API Defines externally program the filter coeff RAM from 1 to 10
351. Int32 ar1.JsonExecute(Int32 devId)                                          -  Configures a device with the Loaded configuration from JSON file 
352. Int32 ar1.MeasureGain(String ADCFileName, UInt32 RxChain, Single ToneFreq, Single RXInputPower)                       -  MeasureGain API defines measure the gain
353. Int32 ar1.Connect_mult(UInt32 RadarDeviceId, UInt32 com_port, UInt32 baud_rate, UInt32 timeout)                       -  Connect to the board
354. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfPllContrlVoltMonConfig_mult(UInt16 RadarDeviceId, Char ReportingMode, Char APLLVctl, Char SynthVCO1VoltageControl, Char SynthVCO2VoltageControl, Char SynthVCO3VoltageControl)                                                                                                                                                                                   -   SetRfPllContrlVoltMonConfig API which defines that configure the information related to APLL and synthesizer voltage control signals monitoring and report the soft results from monitor
355. Int32 ar1.ParseToStandardFormat(String input_file_name, String output_file_name, UInt32 TypeofOutput)                             -  ParseToStandardFormat API Converts a given file  from NonInterleaved to Interleaved. the number of samples per chirp is given by profileconfig API
356. Int32 ar1.CaptureCardConfig_StartRecord(String ADCFileName, Byte PktSeqEnaDisable)          -  CaptureCardConfig_StartRecord API used to start record the ADC data from RF capture card
357. Int32,Int32,Int32,Double& ar1.MeasureFundPower(String ADCfilename, Double Integration_bw_hz, UInt32 Rxchain, UInt32 I_or_Q)                                                   -   Returns the power in dBFS, the frequency in Hz, and the phase in radians of the largest peak located in the fourier specturm
358. Int32,String& ar1.GetRadarLinkVersion()                                     -  GetRadarLinkVersion
359. Int32 ar1.frequencyBandSelection(String deviceBandFreq)                     -  frequencyBandSelection defined as the select a device operating band frequency in GHz
360. Int32 ar1.SetStartFreqAdvChirpConfigLUT(UInt16 StartFreqLUTAddOff, Byte StartFreqNumParams, Byte StartFreqParamSize, Byte StartFreqParamScale, Double StartFreqData1, Double StartFreqData2, Double StartFreqData3, Double StartFreqData4)                                                                                                                                                                  -  Start Freq Advanced Chirp LUT configuration API
361. Int32 ar1.CaptureCardConfig_StopRecord_WithoutSPI()                         -  CaptureCardConfig_StopRecord_WithoutSPI API Used to stop record the ADC data from RF capture card
362. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfRxGainPhMonConfig(Char ProfileIndex, Char RF1FreqBitMask, Char RF2FreqBitMask, Char RF3FreqBitMask, Char ReportingMode, Char TxSelect, Double RxGainAbsoluteErrorThreshold, Double RxGainMismatchThreshold, Double RxGainFlatnessErrorThreshold, UInt16 RxPhaseMismatchThreshold, Double RF1RX0RXGainMismatchOffsetVal, Double RF1RX1RXGainMismatchOffsetVal, Double RF1RX2RXGainMismatchOffsetVal, Double RF1RX3RXGainMismatchOffsetVal, Double RF2RX0RXGainMismatchOffsetVal, Double RF2RX1RXGainMismatchOffsetVal, Double RF2RX2RXGainMismatchOffsetVal, Double RF2RX3RXGainMismatchOffsetVal, Double RF3RX0RXGainMismatchOffsetVal, Double RF3RX1RXGainMismatchOffsetVal, Double RF3RX2RXGainMismatchOffsetVal, Double RF3RX3RXGainMismatchOffsetVal, Double RF1RX0RXPhaseMismatchOffsetVal, Double RF1RX1RXPhaseMismatchOffsetVal, Double RF1RX2RXPhaseMismatchOffsetVal, Double RF1RX3RXPhaseMismatchOffsetVal, Double RF2RX0RXPhaseMismatchOffsetVal, Double RF2RX1RXPhaseMismatchOffsetVal, Double RF2RX2RXPhaseMismatchOffsetVal, Double RF2RX3RXPhaseMismatchOffsetVal, Double RF3RX0RXPhaseMismatchOffsetVal, Double RF3RX1RXPhaseMismatchOffsetVal, Double RF3RX2RXPhaseMismatchOffsetVal, Double RF3RX3RXPhaseMismatchOffsetVal, Char DitherEn, SByte RF1MinFreqDither, SByte RF1MaxFreqDither, SByte RF2MinFreqDither, SByte RF2MaxFreqDither, SByte RF3MinFreqDither, SByte RF3MaxFreqDitheretRfRxGainPhMonConfig API which defines that configure the monitors of reciever gain and phase, and report the soft results from monitor
363. Int32 ar1.LvdsClkConfig(Char laneClk, Char dataRate)                        -  LvdsClkConfig API Defines the used to HSI Clock configuration
364. Int32 ar1.ChanNAdcConfig(UInt16 Tx0En, UInt16 Tx1En, UInt16 Tx2En, UInt16 Tx3En, UInt16 Rx0En, UInt16 Rx1En, UInt16 Rx2En, UInt32 Rx3En, Int32 BitsVal, UInt32 FmtVal, UInt32 IQSwap)                                                                                                             -   Static device config API which defines configure both the Transmiter and Reciever channels of Radar device and also ADC data format output
365. Int32 ar1.ContStrConfig(Double startFreqConst, UInt16 digOutSampleRate, Char rxGain, Char hpfCornerFreq1, Char hpfCornerFreq2, UInt32 tx0OutPowerBackoffCode, UInt32 tx1OutPowerBackoffCode, UInt32 tx2OutPowerBackoffCode, UInt32 tx3OutPowerBackoffCode, UInt16 tx0PhaseShifter, UInt16 tx1PhaseShifter, UInt16 tx2PhaseShifter, UInt16 tx3PhaseShifter, UInt16 ForceVCOSelect, UInt16 MiscFeatEnselect)                                                                                                                                                                                                                                                                                                                                  -  Continuous Streming Configuration API defines Configuration of the data path to transfer the captured ADC samples continuously without missing any sample to external Device(host)
366. Int32 ar1.TDACaptureCard_StopRecord_mult(UInt16 RadarDeviceId)              -  TDACaptureCard_StopRecord API used to stop/close the VIP ports in the TDA Capture Card
367. Int32 ar1.ContStrModDisable_mult(UInt16 RadarDeviceId)                      -  Continuous Streaming Mode disable API defines Configuration needed to disable the continuous streaming mode from the device
368. Int32 ar1.Calling_ATE_DisconnectTarget()                                    -  Disconnect from the board
369. Int32,Int32,Int32,Double& ar1.MeasurePeakInBandwidth(String ADCfilename, Double freq_Start_in_hz, Double integration_bw_hz, Double Bandwidth_in_hz, UInt32 Rxchain, UInt32 I_or_Q)                                                                                                          -  The returns the power in dBFS/Hz), the Frequency(in Hz) and the phase (in Radians of the largest peak located between two frequency
370. Int32 ar1.FrameConfig(UInt16 chirpStartIdx, UInt16 chirpEndIdx, UInt16 frameCount, UInt16 loopCount, Single periodicity, Single triggerDelay, UInt16 TriggerSelect)                                                                                           -  Frame Configuration API defines Frame formation which has sequence of chirps to be transmitted subsequently
371. Int32 ar1.ConfigureRFDCCard_EEPROM_WithoutSPI(String SystemSourceIPAddress, String FPGADestIPAddress, String FPGAMACAddress, UInt32 ConfigPort, UInt32 RecordPort)                                                                                          -  ConfigureRFDCCard_EEPROM_WithoutSPI API used toconfigure the RF data capture card of EEPROM
372. Int32,Int32,UInt32& ar1.GetRFBootupStatus()                                 -  GetRFBootupStatus
373. Int32 ar1.SelectPMICDevice(Int32 id)                                        -  Chooses the PMIC devices
374. Int32 ar1.CSI2LaneConfig_mult(UInt16 RadarDeviceId, UInt16 CSI2DataLane0Pos, UInt16 CSI2DataLane0Pol, UInt16 CSI2DataLane1Pos, UInt16 CSI2DataLane1Pol, UInt16 CSI2DataLane2Pos, UInt16 CSI2DataLane2Pol, UInt16 CSI2DataLane3Pos, UInt16 CSI2DataLane3Pol, UInt16 CSI2ClockPos, UInt16 CSI2ClockPol, Char CSI2LineStartEndDis)                                                                                                                                                                                                                                                       -  CSI2LaneConfig
375. Int32 ar1.SetPerChirpPhaseShifterConfig_mult(UInt16 RadarDeviceId, UInt16 ChirpStartIndex, UInt16 ChirpEndIndex, UInt16 Tx0PhaseShifter, UInt16 Tx1PhaseShifter, UInt16 Tx2PhaseShifter, UInt16 Tx3PhaseShifter)                                                                                                                                        -  SetPerChirpPhaseShifterConfig API Defines static phase configurations per chirp in each of the TXs Channels.
376. Int32 ar1.Calling_SetFwFilePath(String bss_file_path, String mss_file_path)   -  Set the FW file path
377. Void ar1.ShowGui()                                                          -  Display the AutoRadar AR1xxx FW User interface
378. Int32 ar1.SetAnalogFaultInjectionConfig_mult(UInt16 RadarDeviceId, Byte Reserved, Byte RxGainDrop, Byte RxPhaseInv, Byte RxHighNoise, Byte RxIFStageFault, Byte RxLOAmpFault, Byte TxLOAmpFault, Byte TxGainDrop, Byte TxPhaseInv, Byte SynthFault, Byte SupplyLDOFault, Byte MiscFault, Byte MiscThresholdFault, Byte TxPsDacFault, UInt16 Reserved3, UInt32 Reserved4)                                                                                                                                                                                                                                                                                                -  SetAnalogFaultInjectionConfig API used to inject the faults in the analog circuits to test the corresponding monitors
379. Int32 ar1.AdvChirpLUTConfig_mult(UInt16 RadarDeviceId, UInt16 lutAddressOffset, UInt16 numBytes)                        -  Advanced Chirp LUT configuration API
380. Int32,UInt32& ar1.gpioGetValue(UInt32 RadarDeviceId, UInt32 gpioBase, UInt32 gpioPin)             -  gpioGetValue API is used to get the GPIO value for the given configuration
381. Int32 ar1.SetProgFiltCoeffRam51to60_mult(UInt16 RadarDeviceId, Int16 FirstCoeff, Int16 SecondCoeff, Int16 ThirdCoeff, Int16 FourthCoeff, Int16 FifthCoeff, Int16 SixthCoeff, Int16 SeventhCoeff, Int16 EigthCoeff, Int16 NinethCoeff, Int16 TenthCoeff)                                                                                                                                                                               -  SetProgFiltCoeffRam51to60 API Defines externally program the filter coeff RAM from 1 to 10
382. String ar1.GetBSSPatchFwVersion()                                           -  Get the version of the BSS Patch FW loaded (and update it in the gui)
383. Int32,Int32,UInt32& ar1.RfEnable()                                          -  RfEnable
384. Int32 ar1.SetProgFiltCoeffRam31to40_mult(UInt16 RadarDeviceId, Int16 FirstCoeff, Int16 SecondCoeff, Int16 ThirdCoeff, Int16 FourthCoeff, Int16 FifthCoeff, Int16 SixthCoeff, Int16 SeventhCoeff, Int16 EigthCoeff, Int16 NinethCoeff, Int16 TenthCoeff)                                                                                                                                                                               -  SetProgFiltCoeffRam31to40 API Defines externally program the filter coeff RAM from 1 to 10
385. Int32 ar1.SetCalibDataRestoreConfig(UInt16 ChunkID, UInt16 NumChunks, String CalibRestoreFilePath)                          -  SetCalibDataRestoreConfig API used to restore the calibration data from device
386. String ar1.GetMSSPatchFwVersion()                                           -  Get the version of the MSS patch FW loaded (and update it in the gui)
387. Int32 ar1.DownloadBSSFw_mult(UInt32 RadarDeviceId, String path)             -  Download firmware
388. Int32 ar1.PowerOff_mult()                                                   -  PowerOff
389. Int32 ar1.ClearAdvChirpLUTConfig()                                          -  Clear Advanced Chirp LUT configuration API
390. Int32 ar1.SetCalibMonConfig(UInt32 CalibMonId)                              -  SetCalibMonConfig API Used to trigger individual calibration and monitoring APIs for BSS for testing purposes
391. Int32 ar1.SetMSSDeviceConfig(Byte LoggerEn, Byte AsyncEventCRCConfig)       -   SetMSSDeviceConfig API which configures the direction of async event from MSS
392. Int32 ar1.JsonImport(String jsonFilePath)                                   -  Imports mmWave JSON Configuration file
393. Int32 ar1.SetMiscConfig(UInt32 PerChirpPhaseShifterEnable, UInt32 AdvChirpConfigEnable, UInt32 AdvChirpErrChkDisable, UInt32 CalMonTimeUnitErrChkDisable, UInt32 ControlRampDownEnable, UInt32 CrdDitherEnable, UInt32 AdcStrtTimeRes, UInt32 DAREnable, Double RFSlopeMag, Double fastResetTime)                                                                                                                                                                                                                         -   PerChirpPhaseShifterEnaConfig API which defines controls miscellaneous global RF controls
394. Int32 ar1.selectCascadeMode(UInt32 mode)                                    -  Select the Cascade Mode
395. Int32 ar1.SetRFPSLoopbackConfig(UInt16 PSLoopBackFreq, UInt16 PSLoopBackEnabled, UInt16 PSLoopBackTXId0, UInt16 PSLoopBackTXId1, UInt16 PGAGainIndex)                                                                             -  SetRFPSLoopbackConfig API Defines Enables/Disables PS(Phase shifter) loopback for all enabled profiles and it used to debug both Tx and Rx chains.
396. Int32,Int32,String& ar1.GetPMICRegConfig_mult(UInt32 RadarDeviceId, Byte SlaveAddress, Byte RegAddress, UInt32 DataSize)                                                -  GetPMICRegConfig API is used for configure the PMIC register 
397. Int32 ar1.ProfileConfig(UInt16 profileId, Double startFreqConst, Single idleTimeConst, Single adcStartTimeConst, Single rampEndTime, UInt32 tx0OutPowerBackoffCode, UInt32 tx1OutPowerBackoffCode, UInt32 tx2OutPowerBackoffCode, UInt32 tx3OutPowerBackoffCode, Single tx0PhaseShifter, Single tx1PhaseShifter, Single tx2PhaseShifter, Single tx3PhaseShifter, Single freqSlopeConst, Single txStartTime, UInt16 numAdcSamples, UInt16 digOutSampleRate, UInt32 hpfCornerFreq1, UInt32 hpfCornerFreq2, Char rxGain, Char hpfInitControlSelect, Char highResTxPowerEn, Char runTimeTxPowMultiTxCalEnrofile configuration API which defines chirp profile parameters
398. Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfGpadcIntAnaSignalsMonConfig(Char ReportingMode)                      -  SetRfGpadcIntAnaSignalsMonConfig API which defines that configure the information related to GPADC internal annalog signal monitoring and report the soft results from monitor
399. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int16& ar1.RFTemperatureGet()                       -  RF Temperature Get API Defines to provide the device temperture sensor information dynamically 
400. Int32 ar1.RxGainTempLutSet_mult(UInt16 RadarDeviceId, Char ProfileIndex, Char Rx1GainCodeTempLessThanNeg30, Char Rx1GainCodeTempNeg30ToNeg20, Char Rx1GainCodeTempNeg20ToNeg10, Char Rx1GainCodeTempNeg10To0, Char Rx1GainCodeTemp0To10, Char Rx1GainCodeTemp10To20, Char Rx1GainCodeTemp20To30, Char Rx1GainCodeTemp30To40, Char Rx1GainCodeTemp40To50, Char Rx1GainCodeTemp50To60, Char Rx1GainCodeTemp60To70, Char Rx1GainCodeTemp70To80, Char Rx1GainCodeTemp80To90, Char Rx1GainCodeTemp90To100, Char Rx1GainCodeTemp100To110, Char Rx1GainCodeTemp110To120, Char Rx1GainCodeTemp120To130, Char Rx1GainCodeTemp130To140, Char Rx1GainCodeTempMoreThan140)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      -   RxGainTempLutSet API used to overwrite the RX gain temperature LUT used in firmware
401. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.AdvTxGainTempLutGet(Char ProfileIndex, Char TxIndex)                                                                                                                      -   AdvTxGainTempLutGet API used to read the TX gain temperature LUT used by the firmware
402. Int32 ar1.SetProgFiltCoeffRam51to60(Int16 FirstCoeff, Int16 SecondCoeff, Int16 ThirdCoeff, Int16 FourthCoeff, Int16 FifthCoeff, Int16 SixthCoeff, Int16 SeventhCoeff, Int16 EigthCoeff, Int16 NinethCoeff, Int16 TenthCoeff)                                                                                                                                                    -  SetProgFiltCoeffRam51to60 API Defines externally program the filter coeff RAM from 1 to 10
403. Int32 ar1.SetChirpConfigADCPath(String filePath)                            -  Set the ADC file path in the Chirp Config Tab GUI
404. Int32 ar1.SetProgFiltCoeffRamApply()                                        -  SetProgFiltCoeffRam API Defines externally program the filter coeff RAM
405. Int32 ar1.SetADCTimeAdvChirpConfigLUT(UInt16 ADCTimeLUTAddOff, Byte ADCTimeNumParams, Byte ADCTimeParamSize, Byte ADCTimeParamScale, Double ADCTimeData1, Double ADCTimeData2, Double ADCTimeData3, Double ADCTimeData4)                                                                                                                                                -  ADC time Advanced Chirp LUT configuration API
406. Int32 ar1.StartRlTimePostProc(String filename)                              -  StartRlTimePostProc
407. Int32 ar1.SetProgFiltCoeffRam21to30_mult(UInt16 RadarDeviceId, Int16 FirstCoeff, Int16 SecondCoeff, Int16 ThirdCoeff, Int16 FourthCoeff, Int16 FifthCoeff, Int16 SixthCoeff, Int16 SeventhCoeff, Int16 EigthCoeff, Int16 NinethCoeff, Int16 TenthCoeff)                                                                                                                                                                               -  SetProgFiltCoeffRam21to30 API Defines externally program the filter coeff RAM from 1 to 10
408. Int32 ar1.LPModConfig(Int32 AnaChan, Int32 LpAdcMod)                        -  LP Mod Config API which defines both Configure the ADC Mode and analog filter channel format
409. Int32 ar1.AdvTxGainTempLutSet(Char ProfileIndex, Char TxIndex, Char TxGainCodeTempLessThanNeg30, Char TxGainCodeTempNeg30ToNeg20, Char TxGainCodeTempNeg20ToNeg10, Char TxGainCodeTempNeg10To0, Char TxGainCodeTemp0To10, Char TxGainCodeTemp10To20, Char TxGainCodeTemp20To30, Char TxGainCodeTemp30To40, Char TxGainCodeTemp40To50, Char TxGainCodeTemp50To60, Char TxGainCodeTemp60To70, Char TxGainCodeTemp70To80, Char TxGainCodeTemp80To90, Char TxGainCodeTemp90To100, Char TxGainCodeTemp100To110, Char TxGainCodeTemp110To120, Char TxGainCodeTemp120To130, Char TxGainCodeTemp130To140, Char TxGainCodeTempMoreThandvTxGainTempLutSet API used to overwrite the TX gain temperature LUT used in firmware
410. Int32 ar1.SetCalibDataRestoreConfig_mult(UInt16 RadarDeviceId, UInt16 ChunkID, UInt16 NumChunks, String CalibRestoreFilePath)                                                     -  SetCalibDataRestoreConfig API used to restore the calibration data from device
411. Int32 ar1.StartFrame()                                                      -  StartFrame
412. Int32 ar1.CaptureCard_DisConnect_WithoutSPI()                               -  CaptureCard_DisConnect_WithoutSPI API used to disconnect the socket 
413. Int32 ar1.SetProgFiltCoeffRam81to90_mult(UInt16 RadarDeviceId, Int16 FirstCoeff, Int16 SecondCoeff, Int16 ThirdCoeff, Int16 FourthCoeff, Int16 FifthCoeff, Int16 SixthCoeff, Int16 SeventhCoeff, Int16 EigthCoeff, Int16 NinethCoeff, Int16 TenthCoeff)                                                                                                                                                                               -  SetProgFiltCoeffRam81to90 API Defines externally program the filter coeff RAM from 1 to 10
414. Int32 ar1.EnableTestSource_mult(UInt16 RadarDeviceId, UInt16 mode)          -  EnableTestSource
415. Int32 ar1.SetRfTxPhShiftDACMonConfig(Byte ProfileIndex, Byte ReportingMode, Byte Tx0PSDACSel, Byte Tx1PSDACSel, Byte Tx2PSDACSel, Byte Tx3PSDACSel, Double TxPSDACThres, Double Tx1PSDACThres, Double Tx2PSDACThres, Double Tx3PSDACThres)                                                                                                                                                                  -  SetRfTxPhShiftDACMonConfig API is a monitoring configuration API containing information related to TX phaseshifter DAC monitoring
416. Int32 ar1.GetNumOfRawFiles(String adc_file_path)                            -  GetNumOfRawFiles
417. Int32,String& ar1.GetdeviceVariant()                                        -  Get Device Variant
418. Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfTxNPowMonConfig(Char ProfileIndex, Char RF1FreqBitMask, Char RF2FreqBitMask, Char RF3FreqBitMask, Char TxSelMask1, Char TxSelMask2, Char TxSelMask3, Char TxSelMask4, Char ReportingMode, Double TxPowerAbsoluteErrorThreshold, Double TxPowerFlatnessErrorThreshold, Double TxPowerOffsetRF1, Double TxPowerOffsetRF2, Double TxPowerOffsetRF3)                                                                                                                                                                                                                                                                                                                                   -   SetRfTxNPowMonConfig API which defines that configure the monitors of TXN transmitter output power and report the soft results from monitor
419. Int32 ar1.DynamicChirpEnableCfgSet(UInt32 Reserved)                         -  DynamicChirpEnableCfgSet API used to trigger the copy of chirp configuration from software to hardware . the copy take place at the end of going frame
420. Int32 ar1.TDACaptureCard_StartRecord_mult(UInt16 RadarDeviceId, UInt32 numFilesAllocated, UInt32 enableDataPacking, String captureDirectory, UInt32 numFramesToCapture)                                                                                               -  TDACaptureCard_StartRecord API used to start/open the VIP ports in the TDA Capture Card
421. Int32 ar1.StartMatlabPostProcForTDAContStream(String filename)              -  StartMatlabPostProcForTDAContStream
422. Int32 ar1.SetMonTypeTriggerConfig(Char triggerType0, Char triggerType1, Char triggerType2)                  -   SetMonTypeTriggerConfig API which defines the control sequence of execution of monitors
423. Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfTx0IntAnaSignalsMonConfig_mult(UInt16 RadarDeviceId, Char ProfileIndex, Char ReportingMode)                                                                        -  SetRfTx0IntAnaSignalsMonConfig API which defines that configure the information related to TX0 internal analog signals monitoring and report the soft results from monitor
424. Int32 ar1.SaveCQData(String FileName, UInt32 CQDataType)                    -  API used to Save CQ Data in a file
425. Int32 ar1.CreateHistogram(String output_file_name, String input_file_name, UInt32 MinLimit, UInt32 MaxLimit, UInt32 NumBins, UInt32 TypeOfData, UInt32 RxChain, UInt32 I_OR_Q)                                                                                                      -  CreateHistogram API populates the outputfilename with the histogram of the'fft output' for the file specified by ADC filename
426. Int32 ar1.LVDSLaneConfig(UInt16 laneFrmtCfg, UInt16 lane1En, UInt16 lane2En, UInt16 lane3En, UInt16 lane4En, UInt16 msbFst, UInt16 pktEndPls, UInt16 crcEn)                                                                                   -  LVDSLaneConfig API Defines the device data format configuration
427. Int32 ar1.WriteAdvChirpConfigLUT(UInt16 lutAddressOffset, Byte value)       -  Write Advanced Chirp LUT configuration API
428. Int32 ar1.SetProgFiltCoeffRam91to100_mult(UInt16 RadarDeviceId, Int16 FirstCoeff, Int16 SecondCoeff, Int16 ThirdCoeff, Int16 FourthCoeff, Int16 FifthCoeff, Int16 SixthCoeff, Int16 SeventhCoeff, Int16 EigthCoeff, Int16 NinethCoeff, Int16 TenthCoeff)                                                                                                                                                                                -  SetProgFiltCoeffRam91to100 API Defines externally program the filter coeff RAM from 1 to 10
429. Int32 ar1.TDAFolderDelete(String foldername, String com_port, Int32 baudrate)     -  Delete a folder from TDA file system at /mnt/ssd directory
430. Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfTempMonConfig_mult(UInt16 RadarDeviceId, Char ReportingMode, Int16 AnaTempThreshMin, Int16 AnaTempThreshMax, Int16 Reserved1, Int16 Reserved2, Int16 TempDiffThresh)                                                                                                                                                                                           -  SetRfTempMonConfig API which defines that configure the information related to temperature monitoring and report the soft results from monitor
431. Int32,Int32,Int32,Double& ar1.MeasureThirdHarmonicCharacsteristics(String ADCfilename, Double fund_freq_hz, Double Integration_bw_hz, UInt32 Rxchain, UInt32 I_or_Q)                                                                                            -  Returns the power(in dBFS), the frequency(in Hz), and the phase(in radians) of the third harmonic peak located in the fourier specturm. the third harmonic is sought at fund_freq_hz x3. Once the harmonic is found , its energy is computed by integrating_bw_hz around the peak
432. Int32 ar1.FrameConfig_mult(UInt16 RadarDeviceId, UInt16 chirpStartIdx, UInt16 chirpEndIdx, UInt16 frameCount, UInt16 loopCount, Single periodicity, Single triggerDelay, UInt16 TriggerSelect)                                                                                                                      -  Frame Configuration API defines Frame formation which has sequence of chirps to be transmitted subsequently
433. Int32,Int32,Double& ar1.MeasureDC(String ADCfilename, UInt32 Rxchain, UInt32 I_or_Q)            -  Returns the DC in Volts for the specified Rxchain with complex, real or imaginary channel
434. Int32 ar1.ContStrModEnable()                                                -  Continuous Streaming Mode Enable API defines Configuration needed to enable the continuous streaming mode from the device
435. Int32,Int32,UInt32& ar1.RfEnable_mult(UInt16 RadarDeviceId)                 -  RfEnable_mult
436. Int32 ar1.TDAContStream_StartRecord_mult(UInt16 RadarDeviceId, String captureDirectory)               -  TDAContStream_StartRecord API used to start/open the VIP ports in the TDA Capture Card for the Continous Streaming mode of AWR
437. Int32 ar1.AdvDynPerChirpPhShifterCfgSet_mult(UInt16 RadarDeviceId, Byte Reserved, Byte ChirpSegmentSelect, Byte Chirp1Tx0PhaseShifter, Byte Chirp1Tx1PhaseShifter, Byte Chirp1Tx2PhaseShifter, Byte Chirp1Tx3PhaseShifter, Byte Chirp2Tx0PhaseShifter, Byte Chirp2Tx1PhaseShifter, Byte Chirp2Tx2PhaseShifter, Byte Chirp2Tx3PhaseShifter, Byte Chirp3Tx0PhaseShifter, Byte Chirp3Tx1PhaseShifter, Byte Chirp3Tx2PhaseShifter, Byte Chirp3Tx3PhaseShifter, Byte Chirp4Tx0PhaseShifter, Byte Chirp4Tx1PhaseShifter, Byte Chirp4Tx2PhaseShifter, Byte Chirp4Tx3PhaseShifter, Byte Chirp5Tx0PhaseShifter, Byte Chirp5Tx1PhaseShifter, Byte Chirp5Tx2PhaseShifter, Byte Chirp5Tx3PhaseShifter, Byte Chirp6Tx0PhaseShifter, Byte Chirp6Tx1PhaseShifter, Byte Chirp6Tx2PhaseShifter, Byte Chirp6Tx3PhaseShifter, Byte Chirp7Tx0PhaseShifter, Byte Chirp7Tx1PhaseShifter, Byte Chirp7Tx2PhaseShifter, Byte Chirp7Tx3PhaseShifter, Byte Chirp8Tx0PhaseShifter, Byte Chirp8Tx1PhaseShifter, Byte Chirp8Tx2PhaseShifter, Byte Chirp8Tx3PhaseShifter, Byte Chirp9Tx0PhaseShifter, Byte Chirp9Tx1PhaseShifter, Byte Chirp9Tx2PhaseShifter, Byte Chirp9Tx3PhaseShifter, Byte Chirp10Tx0PhaseShifter, Byte Chirp10Tx1PhaseShifter, Byte Chirp10Tx2PhaseShifter, Byte Chirp10Tx3PhaseShifter, Byte Chirp11Tx0PhaseShifter, Byte Chirp11Tx1PhaseShifter, Byte Chirp11Tx2PhaseShifter, Byte Chirp11Tx3PhaseShifter, Byte Chirp12Tx0PhaseShifter, Byte Chirp12Tx1PhaseShifter, Byte Chirp12Tx2PhaseShifter, Byte Chirp12Tx3PhaseShifter, Byte Chirp13Tx0PhaseShifter, Byte Chirp13Tx1PhaseShifter, Byte Chirp13Tx2PhaseShifter, Byte Chirp13Tx3PhaseShifter, Byte Chirp14Tx0PhaseShifter, Byte Chirp14Tx1PhaseShifter, Byte Chirp14Tx2PhaseShifter, Byte Chirp14Tx3PhaseShifter, Byte Chirp15Tx0PhaseShifter, Byte Chirp15Tx1PhaseShifter, Byte Chirp15Tx2PhaseShifter, Byte Chirp15Tx3PhaseShifter, Byte Chirp16Tx0PhaseShifter, Byte Chirp16Tx1PhaseShifter, Byte Chirp16Tx2PhaseShifter, Byte Chirp16Tx3PhaseShifter, UInt16 ProgramModedvDynPerChirpPhShifterCfgSet API used to dynamically change the per
438. Int32 ar1.AdvancedFrameConfig(UInt16 ForceProfileIdx, UInt16 ChirpStartIdx, UInt16 NumOfChirps, UInt16 NumOfLoops, UInt32 BurstPeriodicity, UInt16 ChirpStartIdxOffset, UInt16 NumOfBrust, UInt16 NumOfBrustLoops, UInt32 SubFramePeriodicity, Byte NumOfSubFrames, Byte ForceProfile, UInt16 NumOfFrames, UInt16 TriggerSelect, UInt32 FrameTrigDelay)                                                                                                                                                                                                                                                                               -  AdvancedFrameConfig
439. Int32 ar1.SetTx2PhShiftAdvChirpConfigLUT(UInt16 TX2PhShiftLUTAddOff, Byte TX2PhShiftNumParams, Double TX2PhShiftData1, Double TX2PhShiftData2, Double TX2PhShiftData3, Double TX2PhShiftData4)                                                                                                                      -  Tx2 Phase shifter Advanced Chirp LUT configuration API
440. Int32 ar1.PowerSaveModeConfig(Int32 PowerSaveMode)                          -  Power Save Mode Config API which defines power saving modes and API configuration
441. Int32,Int32,Int32,Int32,Int32,Int32,String& ar1.SetRfTxNIntAnaSignalsMonConfig_mult(UInt16 RadarDeviceId, Char ProfileIndex, Char ReportingMode, Char tx0En, Char tx1En, Char tx2En, Char tx3En)                                                                                                                        -  SetRfTxNIntAnaSignalsMonConfig API which defines that configure the information related to TX3 internal analog signals monitoring and report the soft results from monitor
442. Int32 ar1.SubFrameStartCfgSet_mult(UInt32 RadarDeviceId, UInt16 StartStopCommand, UInt16 Reserved, UInt16 Reserved2)                                            -  SubFrameStartCfgSet API used for starts or stops transmission of sub frames 
443. Int32 ar1.SetCSI2DelayConfig_mult(UInt16 RadarDeviceId, Byte enableDelayDummy, UInt16 delayVal, UInt16 dummyVal)                                        -  SetCSI2DelayConfig_mult API used to increase the time between the availability of chirp data and the transfer of chirp data over CSI2 interface
444. Int32,UInt32& ar1.ReadRegister(UInt32 address, Int32 start_bit, Int32 end_bit)      -  Read a register by address
445. Int32 ar1.CustomDownloadBSSFw(String path)                                  -  Custom Download firmware
446. Int32 ar1.SetMiscConfig_mult(UInt16 RadarDeviceId, UInt32 PerChirpPhaseShifterEnable, UInt32 AdvChirpConfigEnable, UInt32 AdvChirpErrChkDisable, UInt32 CalMonTimeUnitErrChkDisable, UInt32 ControlRampDownEnable, UInt32 CrdDitherEnable, UInt32 AdcStrtTimeRes, UInt32 DAREnable, Double RFSlopeMag, Double fastResetTime)                                                                                                                                                                                                                                                    -   PerChirpPhaseShifterEnaConfig API which defines controls miscellaneous global RF controls
447. Int32 ar1.FullReset()                                                       -  FullReset
448. Int32 ar1.CaptureCardConfig_Mode_WithoutSPI(UInt32 eLogMode, UInt32 eLvdsMode, UInt32 eDataXferMode, UInt32 eDataCaptureMode, UInt32 eDataFormatMode, Byte Reserved)                                                                                            -  ConfigureRFDCCardMode_WithoutSPI API used to configured the ethernet mode
449. Int32 ar1.SetMCUClockOutConfig(Byte MCUClockControl, Byte MCUClockSrc, Byte SrcClockDiv, Byte Reserved)                               -  SetMCUClockOutConfig API used to configure to set up the desired frequency pf MCU clock that is output from device
450. Int32 ar1.BpmConfig(UInt16 bpmChirpStartIndex, UInt16 bpmChirpEndIndex, UInt16 tx0Off, UInt16 tx0On, UInt16 tx1Off, UInt16 tx1On, UInt16 tx2Off, UInt16 tx2On, UInt16 tx3Off, UInt16 tx3On)                                                                                                                   -  Bpm Configuration API Defines static configurations related to BPM(Binary Phase Modulation) feature in each of the TXs Channels.
451. Int32 ar1.DownloadBSSFw(String path)                                        -  Download firmware
452. Int32 ar1.SetCalibMonConfig_mult(UInt32 RadarDeviceId, UInt32 CalibMonId)   -  SetCalibMonConfig API Used to trigger individual calibration and monitoring APIs for BSS for testing purposes
>